{"version":3,"sources":["web/js/layoutViewport.js"],"names":["exports","container","itemSelector","scrollTimer","visitItems","items","querySelectorAll","total","length","viewTop","scrollTop","containerHeight","offsetHeight","viewLeft","scrollLeft","containerWidth","offsetWidth","i","item","visibility","classList","contains","itemHeight","itemWidth","itemOffsetTop","offsetTop","itemOffsetLeft","offsetLeft","Utils","sendEvent","id","data","value","onVisitItems","clearTimeout","setTimeout","handlers","itemAdded","itemDeleted","resize","layoutChanged","scroll","LayoutViewport","init","pContainer","pItemSelector","addEventListener","addEventsHandlers","this"],"mappings":"AAAC,CAACA,IACA,IAAIC,EACAC,EACAC,EAGJ,SAASC,IACP,MAAMC,EAAQJ,EAAUK,iBAAiBJ,GACnCK,EAAQF,EAAMG,OAEpB,GAAc,IAAVD,EACF,OAGF,MAAME,EAAUR,EAAUS,UACpBC,EAAkBV,EAAUW,aAE5BC,EAAWZ,EAAUa,WACrBC,EAAiBd,EAAUe,YAEjC,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAOU,IAAK,CAC9B,MAAMC,EAAOb,EAAMY,GACnB,GAAIC,EAAM,CACR,IAAIC,EAAa,SAEjB,GAAID,EAAKE,UAAUC,SAAS,YAC1BF,EAAa,cACR,CACL,MAAMG,EAAaJ,EAAKN,aAClBW,EAAYL,EAAKF,YACjBQ,EAAgBN,EAAKO,UACrBC,EAAiBR,EAAKS,YACtBH,GAAiBf,GAClBe,GAAiBf,EAAUE,GAC3Ba,EAAgBF,GAAcb,GAC9Be,EAAgBF,GAAcb,EAAUE,KAEvCe,GAAkBb,GACnBa,GAAkBb,EAAWE,GAC7BW,EAAiBH,GAAaV,GAC9Ba,EAAiBH,GAAaV,EAAWE,KAC5CI,EAAa,WAIjBS,MAAMC,UAAU,kCAAmC,CACjDC,GAAIZ,EAAKa,KAAK,MACdC,MAAOb,MAMf,SAASc,IACP9B,GAAeH,EAAQkC,aAAa/B,GACpCA,EAAcH,EAAQmC,WAAW/B,EAnDrB,KAsDd,MAAMgC,EAAW,CACfC,UAAWJ,EACXK,YAAaL,EACbM,OAAQN,EACRO,cAAeP,EACfQ,OAAQR,GAWVjC,EAAQ0C,eAAiB,CACvBC,KATF,SAAcC,EAAYC,GACxB5C,EAAY2C,EACZ1C,EAAe2C,EACf5C,EAAU6C,iBAAiB,SAAUV,EAASK,QAC9CzC,EAAQ8C,iBAAiB,SAAUV,EAASG,QAC5CX,MAAMmB,kBAAkB,iBAAkBX,EAAUpC,MAvEvD,CA6EEgD","sourcesContent":["!(exports => {\n  let container;\n  let itemSelector;\n  let scrollTimer;\n  const delay = 100;\n\n  function visitItems() {\n    const items = container.querySelectorAll(itemSelector);\n    const total = items.length;\n\n    if (total === 0) {\n      return;\n    }\n\n    const viewTop = container.scrollTop;\n    const containerHeight = container.offsetHeight;\n\n    const viewLeft = container.scrollLeft;\n    const containerWidth = container.offsetWidth;\n\n    for (let i = 0; i < total; i++) {\n      const item = items[i];\n      if (item) {\n        let visibility = 'hidden';\n\n        if (item.classList.contains('on-stage')) {\n          visibility = 'visible';\n        } else {\n          const itemHeight = item.offsetHeight;\n          const itemWidth = item.offsetWidth;\n          const itemOffsetTop = item.offsetTop;\n          const itemOffsetLeft = item.offsetLeft;\n          if (((itemOffsetTop >= viewTop &&\n               itemOffsetTop <= viewTop + containerHeight) ||\n              (itemOffsetTop + itemHeight >= viewTop &&\n               itemOffsetTop + itemHeight <= viewTop + containerHeight)) &&\n\n              ((itemOffsetLeft >= viewLeft &&\n               itemOffsetLeft <= viewLeft + containerWidth) ||\n              (itemOffsetLeft + itemWidth >= viewLeft &&\n               itemOffsetLeft + itemWidth <= viewLeft + containerWidth))) {\n            visibility = 'visible';\n          }\n        }\n\n        Utils.sendEvent('roomView:streamVisibilityChange', {\n          id: item.data('id'),\n          value: visibility\n        });\n      }\n    }\n  }\n\n  function onVisitItems() {\n    scrollTimer && exports.clearTimeout(scrollTimer);\n    scrollTimer = exports.setTimeout(visitItems, delay);\n  }\n\n  const handlers = {\n    itemAdded: onVisitItems,\n    itemDeleted: onVisitItems,\n    resize: onVisitItems,\n    layoutChanged: onVisitItems,\n    scroll: onVisitItems\n  };\n\n  function init(pContainer, pItemSelector) {\n    container = pContainer;\n    itemSelector = pItemSelector;\n    container.addEventListener('scroll', handlers.scroll);\n    exports.addEventListener('resize', handlers.resize);\n    Utils.addEventsHandlers('layoutManager:', handlers, exports);\n  }\n\n  exports.LayoutViewport = {\n    init\n  };\n})(this);\n"]}