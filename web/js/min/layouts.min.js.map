{"version":3,"sources":["web/js/layouts.js"],"names":["LayoutBase","container","items","type","this","data","prototype","[object Object]","features","Object","keys","forEach","id","style","feature","Utils","sendEvent","total","length","Grid","call","create","configurable","columns","Math","ceil","sqrt","width","height","constructor","Float","addDraggableFeature","get","publisher","addedDraggableFeature","getDraggable","then","draggable","on","rearrange","args","apply","destroy","off","arguments","bind","F2FHorizontal","F2FVertical","Hangout","item","handlers","window","addEventListener","sanitize","putItemOnStage","totalOnStage","getRandomItem","updateTotalOnStage","getAttributeName","charAt","toUpperCase","slice","getItemType","getItemId","stageTypeDescriptors","map","aType","attrName","stageIds","ids","descriptor","aIds","totalOnStrip","layoutView:itemSelected","evt","detail","isOnStage","removeCurrentItemFromStage","layoutManager:itemDeleted","removeItemFromStage","layoutManager:itemAdded","screen","handleEvent","putStageId","classList","add","status","find","removeStageId","remove","contains","reset","sanitizedStageIds","Array","querySelectorAll","elem","name","removeEventListener","HangoutHorizontal","streamSelectedId","HangoutVertical"],"mappings":"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","sourcesContent":["const LayoutBase = function (container, items, type) {\n  this.items = items;\n  this.container = container;\n  container.data('currentLayoutType', type);\n};\n\nLayoutBase.prototype = {\n  rearrange() {\n    const features = this.features;\n    Object.keys(this.items).forEach(function (id) {\n      const style = this.items[id].style;\n      Object.keys(features).forEach(feature => {\n        style[feature] = features[feature];\n      });\n    }, this);\n    Utils.sendEvent('hangout:rearranged');\n    return this;\n  },\n\n  get features() {\n    return {};\n  },\n\n  get total() {\n    return Object.keys(this.items).length;\n  },\n\n  destroy() {\n    this.container = null;\n  }\n};\n\nconst Grid = function (container, items) {\n  LayoutBase.call(this, container, items, 'grid');\n};\n\nGrid.prototype = Object.create(LayoutBase.prototype, {\n  features: {\n    configurable: false,\n    get() {\n      const total = this.total;\n      const columns = Math.ceil(Math.sqrt(total));\n\n      return {\n        width: `${100 / columns}%`,\n        height: `${100 / Math.ceil(total / columns)}%`\n      };\n    }\n  }\n});\n\nGrid.prototype.constructor = Grid;\n\nconst Float = function (container, items) {\n  LayoutBase.call(this, container, items, 'float');\n  this.addDraggableFeature();\n};\n\nFloat.prototype = Object.create(LayoutBase.prototype, {\n  features: {\n    configurable: false,\n    get() {\n      return {\n        width: '100%',\n        height: '100%'\n      };\n    }\n  },\n\n  publisher: {\n    configurable: false,\n    get() {\n      return this.items.publisher;\n    }\n  }\n});\n\nFloat.prototype.constructor = Float;\n\nFloat.prototype.addDraggableFeature = function () {\n  if (this.addedDraggableFeature || !this.publisher) {\n    return;\n  }\n\n  this.addedDraggableFeature = true;\n  Utils.getDraggable().then(draggable => {\n    draggable.on(this.publisher);\n  });\n};\n\nFloat.prototype.rearrange = function (...args) {\n  LayoutBase.prototype.rearrange.apply(this, args);\n  this.addDraggableFeature();\n};\n\nFloat.prototype.destroy = function () {\n  Utils.getDraggable().then(function (draggable) {\n    draggable.off(this.publisher);\n    LayoutBase.prototype.destroy.apply(this, arguments);\n  }.bind(this));\n};\n\nconst F2FHorizontal = function (container, items) {\n  LayoutBase.call(this, container, items, 'f2f_horizontal');\n};\n\nF2FHorizontal.prototype = Object.create(LayoutBase.prototype, {\n  features: {\n    configurable: false,\n    get() {\n      return {\n        width: '100%',\n        height: `${100 / this.total}%`\n      };\n    }\n  }\n});\n\nF2FHorizontal.prototype.constructor = F2FHorizontal;\n\nconst F2FVertical = function (container, items) {\n  LayoutBase.call(this, container, items, 'f2f_vertical');\n};\n\nF2FVertical.prototype = Object.create(LayoutBase.prototype, {\n  features: {\n    configurable: false,\n    get() {\n      return {\n        width: `${100 / this.total}%`,\n        height: '100%'\n      };\n    }\n  }\n});\n\nF2FVertical.prototype.constructor = F2FVertical;\n\nconst Hangout = function (container, items, item, type) {\n  LayoutBase.call(this, container, items, type);\n  Object.keys(this.handlers).forEach(function (type) {\n    window.addEventListener(type, this);\n  }, this);\n\n  this.sanitize(!!item);\n\n  if (item) {\n    this.putItemOnStage(item);\n  } else if (!this.totalOnStage) {\n    this.putItemOnStage(this.getRandomItem());\n  }\n\n  this.updateTotalOnStage();\n};\n\n/*\n * It returns the data attribute where the id will be stored depending on type\n *\n * @param type - camera or screen\n */\nHangout.getAttributeName = type => {\n  return `onStage${type.charAt(0).toUpperCase()}${type.slice(1)}`;\n};\n\n/*\n * It returns the type of item which is used to index internally\n *\n * @param item - item object\n */\nHangout.getItemType = item => {\n  let type = null;\n\n  switch (item.data('streamType')) {\n    case 'camera':\n    case 'publisher':\n      type = 'camera';\n      break;\n\n    default:\n      type = 'screen';\n  }\n\n  return type;\n};\n\n/*\n * It returns the id of item received as param\n *\n * @param item - item object\n */\nHangout.getItemId = item => {\n  return item.data('id');\n};\n\n/*\n * It returns an array of objects for each event with type and attribute name\n */\nHangout.stageTypeDescriptors = ['camera', 'screen'].map(aType => {\n  return {\n    type: aType,\n    attrName: Hangout.getAttributeName(aType)\n  };\n});\n\nHangout.prototype = Object.create(LayoutBase.prototype, {\n  stageIds: {\n    configurable: false,\n    /*\n     * It returns all ids of items on stage\n     */\n    get() {\n      const ids = {};\n\n      Hangout.stageTypeDescriptors.forEach(function (descriptor) {\n        const id = this.container.data(descriptor.attrName);\n        id && (ids[descriptor.type] = id);\n      }, this);\n\n      return ids;\n    },\n    /*\n     * Store all ids of items on stage\n     */\n    set(aIds) {\n      aIds = aIds || {};\n\n      Hangout.stageTypeDescriptors.forEach(function (descriptor) {\n        if (aIds[descriptor.type]) {\n          this.container.data(descriptor.attrName, aIds[descriptor.type]);\n        } else {\n          this.container.data(descriptor.attrName, null);\n        }\n      }, this);\n    }\n  },\n  totalOnStage: {\n    configurable: false,\n    /*\n     * It returns the total number of items rendered on the stage\n     */\n    get() {\n      return Object.keys(this.stageIds).length;\n    }\n  },\n  totalOnStrip: {\n    configurable: false,\n    /*\n     * It returns the total number of items rendered on the strip\n     */\n    get() {\n      return this.total - this.totalOnStage;\n    }\n  }\n});\n\nHangout.prototype.constructor = Hangout;\n\nHangout.prototype.handlers = {\n  'layoutView:itemSelected': function (evt) {\n    const item = evt.detail.item;\n    if (this.isOnStage(item)) {\n      // Selected item is already on stage so it should be expanded to cover all. That means that\n      // the other item on stage should go to the strip leaving the stage\n      this.removeCurrentItemFromStage(\n        Hangout.getItemType(item) === 'camera' ? 'screen' : 'camera'\n      );\n    } else {\n      this.putItemOnStage(item);\n    }\n    this.updateTotalOnStage();\n  },\n  'layoutManager:itemDeleted': function (evt) {\n    const item = evt.detail.item;\n    if (this.isOnStage(item)) {\n      this.removeItemFromStage(item).updateTotalOnStage();\n      !this.totalOnStage && Utils.sendEvent('hangout:emptyStage');\n    }\n  },\n  'layoutManager:itemAdded': function (evt) {\n    const item = evt.detail.item;\n    // New screen shared goes to stage if there is not another screen shared there\n    if (Hangout.getItemType(item) === 'screen' && !this.stageIds.screen) {\n      this.putItemOnStage(item).updateTotalOnStage();\n    }\n  }\n};\n\nHangout.prototype.handleEvent = function (evt) {\n  this.handlers[evt.type].call(this, evt);\n};\n\n/*\n * It puts an item on stage:\n *\n * 1º) Remove the current item on stage of the same type if it exists and then...\n * 2º) Put the item received as param on the stage\n *\n * @param item - item object\n */\nHangout.prototype.putItemOnStage = function (item) {\n  if (!item) {\n    return this;\n  }\n  const type = Hangout.getItemType(item);\n  this.removeCurrentItemFromStage(type).putStageId(item);\n  item.classList.add('on-stage');\n  type === 'screen' && Utils.sendEvent('hangout:screenOnStage', { status: 'on' });\n  return this;\n};\n\n/*\n * It returns a random item (publisher stream is not included)\n */\nHangout.prototype.getRandomItem = function () {\n  return this.items[Object.keys(this.items).find(id => {\n    return id !== 'publisher';\n  })];\n};\n\n/*\n * It removes the current item on stage given a type if this exists\n *\n * @param type - type of item\n */\nHangout.prototype.removeCurrentItemFromStage = function (type) {\n  const item = this.items[this.stageIds[type]];\n  return this.removeItemFromStage(item);\n};\n\n/*\n * It removes the current item on stage given a type if this exists\n *\n * @param item - item object\n */\nHangout.prototype.removeItemFromStage = function (item) {\n  if (item) {\n    this.removeStageId(item);\n    item.classList.remove('on-stage');\n    Hangout.getItemType(item) === 'screen' &&\n      Utils.sendEvent('hangout:screenOnStage', { status: 'off' });\n  }\n  return this;\n};\n\n/*\n * It returns true if the item is already on stage\n *\n * @param item - item object\n */\nHangout.prototype.isOnStage = item => {\n  return item.classList.contains('on-stage');\n};\n\n/*\n * This method checks the latest status of the stage in order to be synchronized with current\n * items available in the layout.\n *\n * * @param reset - all previous status will be deleted if this flag is true\n */\nHangout.prototype.sanitize = function (reset) {\n  const sanitizedStageIds = {};\n  Array.prototype.forEach.call(this.container.querySelectorAll('.on-stage'), elem => {\n    elem.classList.remove('on-stage');\n  });\n\n  if (!reset) {\n    // Checking items previously on stage if they still exist\n    const stageIds = this.stageIds;\n    Object.keys(stageIds).forEach(function (type) {\n      const id = stageIds[type];\n      const item = this.items[id];\n      if (item) {\n        item.classList.add('on-stage');\n        sanitizedStageIds[type] = id;\n      }\n    }, this);\n  }\n\n  this.stageIds = sanitizedStageIds;\n  return this;\n};\n\n/*\n * It saves an item id on stage\n *\n * @param item - item object\n */\nHangout.prototype.putStageId = function (item) {\n  const ids = this.stageIds;\n  ids[Hangout.getItemType(item)] = Hangout.getItemId(item);\n  this.stageIds = ids;\n  return this;\n};\n\n/*\n * It removes an item id on stage\n *\n * @param item - item object\n */\nHangout.prototype.removeStageId = function (item) {\n  const ids = this.stageIds;\n  delete ids[Hangout.getItemType(item)];\n  this.stageIds = ids;\n  return this;\n};\n\n/*\n * It updates the flag that contains the total number of items on stage in order to update the UI\n */\nHangout.prototype.updateTotalOnStage = function () {\n  this.container.data('totalOnStage', this.totalOnStage);\n  return this.rearrange();\n};\n\nHangout.prototype.destroy = function (...args) {\n  Object.keys(this.handlers).forEach(function (name) {\n    window.removeEventListener(name, this);\n  }, this);\n  LayoutBase.prototype.destroy.apply(this, args);\n};\n\nconst HangoutHorizontal = function (container, items, streamSelectedId) {\n  Hangout.call(this, container, items, streamSelectedId, 'hangout_horizontal');\n};\n\nHangoutHorizontal.prototype = Object.create(Hangout.prototype, {\n  features: {\n    configurable: false,\n    get() {\n      return {\n        width: `${100 / this.totalOnStrip}%`,\n        height: '100%'\n      };\n    }\n  }\n});\n\nHangoutHorizontal.prototype.constructor = HangoutHorizontal;\n\nconst HangoutVertical = function (container, items, streamSelectedId) {\n  Hangout.call(this, container, items, streamSelectedId, 'hangout_vertical');\n};\n\nHangoutVertical.prototype = Object.create(Hangout.prototype, {\n  features: {\n    configurable: false,\n    get() {\n      return {\n        width: '100%',\n        height: `${100 / this.totalOnStrip}%`\n      };\n    }\n  }\n});\n\nHangoutVertical.prototype.constructor = HangoutVertical;\n"]}