{"version":3,"sources":["web/js/rtcApp.js"],"names":["exports","debug","_views","/room/","mainView","dependencies","/","RTCApp","init","Utils","MultiLevelLogger","DEFAULT_LEVELS","all","view","pathViews","Object","keys","numViews","length","path","document","location","pathname","i","startsWith","every","dependency","getView","error","this","addEventListener","window","top","self","iframing_allowed","body","classList","remove","LazyLoader","load","then","protocol","hostname","includes","href","replace","RegExp"],"mappings":"AAEC,CAACA,IACA,IAAIC,EAEJ,MAAMC,EAAS,CACbC,SAAU,CACRC,SAAU,iBACVC,aAAc,CACZ,mBAGJC,IAAK,CACHF,SAAU,oBACVC,aAAc,CACZ,uBAgCNL,EAAQO,OAAS,CACfC,KAXF,WACEP,EAAQ,IAAIQ,MAAMC,iBAAiB,YAAaD,MAAMC,iBAAiBC,eAAeC,KACtF,MAAMC,EAnBR,WACE,MAAMC,EAAYC,OAAOC,KAAKd,GACxBe,EAAWH,EAAUI,OACrBC,EAAOnB,EAAQoB,SAASC,SAASC,SACvC,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAUM,IAC5B,GAAIJ,EAAKK,WAAWV,EAAUS,KAC5BrB,EAAOY,EAAUS,IACdlB,aACAoB,MAAMC,KACI1B,EAAQ0B,IAErB,OAAO1B,EAAQE,EAAOY,EAAUS,IAAInB,UAGxC,OAAO,KAKMuB,GACTd,EACFA,EAAKL,OAELP,EAAM2B,MAAM,4BAA4B5B,EAAQoB,SAASC,SAASC,aAzCvE,CAgDEO,MAGHA,KAAKC,iBAAiB,QAAQ,WAGxBC,OAAOC,MAAQD,OAAOE,MAASF,OAAOG,kBAMxCd,SAASe,KAAKC,UAAUC,OAAO,aAE/BC,WAAWC,KAAK,CACd,4BACA,sBACA,0BACA,gCACA,6BACCC,KAAK,KACNjC,OAAOC,UAZTuB,OAAOC,IAAIZ,SAASC,SAAW,cAkBA,UAA/BD,SAASC,SAASoB,WACjBrB,SAASC,SAASqB,SAASC,SAAS,gBACrCvB,SAASC,SAASqB,SAASC,SAAS,kBAEpCvB,SAASC,SAASuB,KAAOxB,SAASC,SAASuB,KAAKC,QAAQ,IAAIC,OAAO,UAAW","sourcesContent":["/* global RTCApp */\n\n!(exports => {\n  let debug;\n\n  const _views = {\n    '/room/': {\n      mainView: 'RoomController',\n      dependencies: [\n        'RoomController'\n      ]\n    },\n    '/': {\n      mainView: 'LandingController',\n      dependencies: [\n        'LandingController'\n      ]\n    }\n  };\n\n  function getView() {\n    const pathViews = Object.keys(_views);\n    const numViews = pathViews.length;\n    const path = exports.document.location.pathname;\n    for (let i = 0; i < numViews; i++) {\n      if (path.startsWith(pathViews[i]) &&\n        _views[pathViews[i]]\n          .dependencies\n          .every(dependency => {\n            return !!exports[dependency];\n          })) {\n        return exports[_views[pathViews[i]].mainView];\n      }\n    }\n    return null;\n  }\n\n  function init() {\n    debug = new Utils.MultiLevelLogger('rtcApp.js', Utils.MultiLevelLogger.DEFAULT_LEVELS.all);\n    const view = getView();\n    if (view) {\n      view.init();\n    } else {\n      debug.error(`Couldn't find a view for ${exports.document.location.pathname}`);\n    }\n  }\n\n  exports.RTCApp = {\n    init\n  };\n})(this);\n\n\nthis.addEventListener('load', function startApp() {\n  // Note that since the server forbids loading the content on an iframe this should not execute.\n  // But it doesn't hurt either\n  if (window.top !== window.self && !window.iframing_allowed) {\n    // If we're being loaded inside an iframe just hijack the top level window and go back to\n    // the index page.\n    window.top.document.location = '/index.html';\n  } else {\n    // And setting this on an else because the re-location might fail in some cases\n    document.body.classList.remove('forbidden');\n    // Check that everything was loaded correctly, or just use LazyLoader here...\n    LazyLoader.load([\n      '/js/libs/browser_utils.js',\n      '/shared/js/utils.js',\n      '/js/helpers/requests.js',\n      '/js/min/roomController.min.js',\n      '/js/landingController.js'\n    ]).then(() => {\n      RTCApp.init();\n    });\n  }\n\n  // Allow only https on production\n  if (\n    document.location.protocol === 'http:' &&\n    (document.location.hostname.includes('.tokbox.com') ||\n    document.location.hostname.includes('.vonage.com'))\n  ) {\n    document.location.href = document.location.href.replace(new RegExp('^http:'), 'https:');\n  }\n});\n"]}