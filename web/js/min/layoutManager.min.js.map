{"version":3,"sources":["web/js/layoutManager.js"],"names":["global","userLayout","currentLayout","container","items","layouts","lcache","window","localStorage","F2F_LAYOUTS","float","f2f_horizontal","f2f_vertical","GRP_LAYOUTS","grid","hangout_horizontal","hangout_vertical","isOnGoing","layout","Object","getPrototypeOf","prototype","handlers","[object Object]","evt","detail","type","setItem","rearrange","isGroup","Grid","item","getDeviceLayout","isScreen","matchMedia","matches","userSelectedLayout","getItem","layoutModifier","isScreenShared","getTotal","getLayoutByScreenCount","keys","length","CandidateLayout","candidateLayout","Float","calculateCandidateLayout","destroy","Utils","sendEvent","LayoutManager","init","selector","enableHangoutScroll","F2FHorizontal","F2FVertical","HangoutHorizontal","HangoutVertical","document","querySelector","LayoutView","ItemsHandler","addEventsHandlers","smartphonePortrait","addListener","LazyLoader","load","then","LayoutViewport","Promise","resolve","append","id","options","isHangoutRequired","remove","removeItem","removeAll","getItemById","aId","this"],"mappings":"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","sourcesContent":["/* global Grid, Float, F2FHorizontal, F2FVertical, HangoutHorizontal, HangoutVertical, LayoutView,\nLayoutViewport, ItemsHandler */\n\n!(global => {\n  let userLayout = null;\n  let currentLayout = null;\n  let container = null;\n\n  const items = {};\n\n  let layouts;\n  const lcache = window.localStorage;\n  const HANGOUT_BY_DEFAULT = 'hangout_vertical';\n\n  const F2F_LAYOUTS = {\n    float: true,\n    f2f_horizontal: true,\n    f2f_vertical: true\n  };\n\n  const GRP_LAYOUTS = {\n    grid: true,\n    hangout_horizontal: true,\n    hangout_vertical: true\n  };\n\n  function isOnGoing(layout) {\n    return Object.getPrototypeOf(currentLayout) === layout.prototype;\n  }\n\n  const handlers = {\n    layout(evt) {\n      userLayout = evt.detail.type;\n      lcache.setItem('opentokrtc-layout', userLayout);\n      rearrange();\n    },\n    itemSelected(evt) {\n      if (isGroup() && isOnGoing(Grid)) {\n        userLayout = HANGOUT_BY_DEFAULT;\n        rearrange(evt.detail.item);\n      }\n    },\n    emptyStage() {\n      userLayout = 'grid';\n      rearrange();\n    }\n  };\n\n  function getDeviceLayout(isScreen = false) {\n    if (window.matchMedia('screen and (min-device-width : 320px) and (max-device-width : 1024px) and (orientation : landscape)').matches) {\n      return isScreen ? 'hangout_vertical' : 'f2f_vertical';\n    } else if (window.matchMedia('screen and (max-width: 480px) and (orientation : portrait)').matches) {\n      return isScreen ? 'hangout_horizontal' : 'f2f_horizontal';\n    }\n    let userSelectedLayout = null;\n    if (userLayout !== lcache.getItem('opentokrtc-default')) {\n      // not mobile\n      userSelectedLayout = lcache.getItem('opentokrtc-default');\n    }\n    return isScreen ? HANGOUT_BY_DEFAULT : userSelectedLayout;\n  }\n\n  function getLayoutByScreenCount(layout, isScreenShared) {\n    if (isScreenShared) {\n      return layout;\n    }\n    return (getTotal() <= 2) ? layout : 'grid';\n  }\n\n  function layoutModifier() {\n    const isScreenShared = lcache.getItem('opentokrtc-screenshare') != null;\n    userLayout = getLayoutByScreenCount(getDeviceLayout(isScreenShared), isScreenShared);\n    rearrange();\n  }\n\n  function init(selector, enableHangoutScroll) {\n    layouts = {\n      grid: Grid,\n      float: Float,\n      f2f_horizontal: F2FHorizontal,\n      f2f_vertical: F2FVertical,\n      hangout_horizontal: HangoutHorizontal,\n      hangout_vertical: HangoutVertical\n    };\n    container = document.querySelector(selector);\n    LayoutView.init(container);\n    ItemsHandler.init(container, items);\n    Utils.addEventsHandlers('layoutMenuView:', handlers, global);\n    Utils.addEventsHandlers('layoutView:', handlers, global);\n    Utils.addEventsHandlers('hangout:', handlers, global);\n    lcache.setItem('opentokrtc-default', userLayout);\n    const smartphonePortrait = window.matchMedia('screen and (max-width: 480px) and (orientation : portrait)');\n    if (smartphonePortrait.matches) {\n      layoutModifier(smartphonePortrait);\n    }\n    smartphonePortrait.addListener(layoutModifier);\n\n    return enableHangoutScroll ? LazyLoader.load([\n      '/js/layoutViewport.js', '/css/hangoutScroll.css'\n    ]).then(() => {\n      LayoutViewport.init(container.querySelector('.tc-list ul'), '.stream');\n    }) : Promise.resolve();\n  }\n\n  function isHangoutRequired(item) {\n    // New screen shared and 3 or more items implies going to hangout if this isn't our current\n    // layout running\n    return Utils.isScreen(item) && isGroup() &&\n           !(isOnGoing(HangoutHorizontal) || isOnGoing(HangoutVertical));\n  }\n\n  function append(id, options) {\n    const item = LayoutView.append(id, options);\n    items[id] = item;\n    if (isHangoutRequired(item)) {\n      userLayout = getDeviceLayout(true);\n      lcache.setItem('opentokrtc-screenshare', id);\n      rearrange(item);\n    } else {\n      rearrange();\n    }\n    Utils.sendEvent('layoutManager:itemAdded', {\n      item\n    });\n    return item.querySelector('.opentok-stream-container');\n  }\n\n  function remove(id) {\n    const item = items[id];\n    if (!item) {\n      return;\n    }\n\n    if (id === lcache.getItem('opentokrtc-screenshare')) {\n      lcache.removeItem('opentokrtc-screenshare');\n    }\n\n    LayoutView.remove(item);\n    delete items[id];\n    Utils.sendEvent('layoutManager:itemDeleted', {\n      item\n    });\n    layoutModifier();\n  }\n\n  function removeAll() {\n    LayoutView.removeAll();\n  }\n\n  function getItemById(aId) {\n    return items[aId];\n  }\n\n  function getTotal() {\n    return Object.keys(items).length;\n  }\n\n  function calculateCandidateLayout() {\n    let candidateLayout = null;\n\n    if (getTotal() > 2) {\n      candidateLayout = GRP_LAYOUTS[userLayout] ? layouts[userLayout] : Grid;\n    } else {\n      candidateLayout = F2F_LAYOUTS[userLayout] ? layouts[userLayout] : Float;\n    }\n\n    return candidateLayout;\n  }\n\n\n  function isGroup() {\n    return getTotal() > 2;\n  }\n\n  function updateAvailableLayouts() {\n    Utils.sendEvent('layoutManager:availableLayouts', {\n      layouts: isGroup() ? GRP_LAYOUTS : F2F_LAYOUTS\n    });\n  }\n\n  function rearrange(item) {\n    const CandidateLayout = calculateCandidateLayout();\n\n    if (!currentLayout || !isOnGoing(CandidateLayout)) {\n      currentLayout && currentLayout.destroy();\n      currentLayout = new CandidateLayout(container, items, item);\n      Utils.sendEvent('layoutManager:layoutChanged');\n    }\n\n    currentLayout.rearrange();\n    updateAvailableLayouts();\n  }\n\n  global.LayoutManager = {\n    init,\n    append,\n    remove,\n    removeAll,\n    getItemById\n  };\n})(this);\n"]}