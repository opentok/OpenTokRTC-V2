(e=>{let t;const n=new Utils.MultiLevelLogger("chatController.js",Utils.MultiLevelLogger.DEFAULT_LEVELS.all);let a,o;function s(){if(!t)return;const e=RoomStatus.get("chat");if(e){o=e;for(let e=0,t=o.length;e<t;e++)Utils.sendEvent("chatController:incomingMessage",{data:o[e]})}else o=[],RoomStatus.set("chat",o)}let r;const l={"signal:chat":function(e){const t=JSON.parse(e.data);t.senderId=e.from.connectionId,o.push(t),Utils.sendEvent("chatController:incomingMessage",{data:t})},connectionCreated(e){const t=JSON.parse(e.connection.data).userName;this.isMyself(e.connection)?r=this:Utils.sendEvent("chatController:presenceEvent",{userName:t,text:"has joined the call"})},connectionDestroyed(e){Utils.sendEvent("chatController:presenceEvent",{userName:JSON.parse(e.connection.data).userName,text:"has left the call"})}};function i(e){const t=e.detail;return r.sendSignal("chat",t).then(()=>{Utils.sendEvent("chatController:messageDelivered")}).catch(e=>{n.error("Error sending [",t.text.value,"] to the group. ",e.message)})}e.ChatController={init:function(n,r,c){return LazyLoader.dependencyLoad(["/js/min/chatView.min.js"]).then(()=>(a={updatedRemotely:{name:"roomStatus:updatedRemotely",handler:s,couldBeChanged:!0},outgoingMessage:{name:"chatView:outgoingMessage",handler:i}},o=[],t=void 0!==e.RoomStatus,ChatView.init(n,c).then(()=>{var e,n;return t&&RoomStatus.set("chat",o),e=c,Array.isArray(e)&&e.forEach(e=>{const t=a[e.type];t&&t.couldBeChanged&&(t.name=e.name)}),Utils.addHandlers(a),n=r,Array.isArray(n)||(n=[n]),n.push(l),n})))}}})(this);
 //# sourceMappingURL= chatController.min.js.map