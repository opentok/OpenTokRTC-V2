{"version":3,"sources":["web/js/screenShareView.js"],"names":["exports","shareError","_userName","screenShareCtrlEvents","shareScreenError","evt","destroyView","status","detail","errCodes","OTHelper","screenShareErrorCodes","code","accessDenied","showError","message","extNotInstalled","showShareScreenError","extInstallationResult","error","btnCancel","querySelector","btnReload","addEventListener","btnCancelReload","removeEventListener","hideShareScreenError","btnConfirmReload","location","document","href","indexOf","params","Utils","parseSearch","search","userName","generateSearchStr","protocol","hostname","port","pathname","window","showInstallationSuccess","destroyed","RoomView","deleteStreamView","title","description","textContent","onClick","e","target","id","Modal","hide","then","data","type","preLoad","show","ScreenShareView","init","aUserName","sendEvent","addEventsHandlers","this"],"mappings":"AAEC,CAACA,IACA,IAAIC,EACAC,EAEJ,MAAMC,EAAwB,CAC5BC,iBAqBF,SAA0BC,GACxBC,IAEA,MAAMC,EAASF,EAAIG,OACbC,EAAWC,SAASC,sBAGtBJ,EAAOK,OAASH,EAASI,aAC3BC,EAAU,QAASP,EAAOQ,SACjBR,EAAOK,OAASH,EAASO,gBAQpCC,EAAqB,oBALnBH,EAAU,yBAA0BP,EAAOQ,UAhC7CG,sBAgDF,SAA+Bb,GAC7B,MAAME,EAASF,EAAIG,OACfD,EAAOY,MACTL,EAAU,uBAAwBP,EAAOQ,SAM7C,WACE,MAAMK,EAAYnB,EAAWoB,cAAc,gBACrCC,EAAYrB,EAAWoB,cAAc,iBAE3CD,EAAUG,iBAAiB,SAAS,SAASC,IAC3CJ,EAAUK,oBAAoB,QAASD,GACvCE,OAGFJ,EAAUC,iBAAiB,SAAS,SAASI,IAC3CL,EAAUG,oBAAoB,QAASE,GACvC,MAAMC,EAAWC,SAASD,SAC1B,IAAIE,EAAOF,EAASE,KACpB,GAAIA,EAAKC,QAAQ,cAAgB,EAAG,CAClC,MAAMC,EAASC,MAAMC,YAAYL,SAASD,SAASO,QAAQH,OAC3DA,EAAOI,SAAWlC,EAClB,MAAMiC,EAASF,MAAMI,kBAAkBL,GACvCF,EAAO,GAAGF,EAASU,aAAaV,EAASW,YAAYX,EAASY,OAAOZ,EAASa,WAAWN,IAE3FO,OAAOd,SAASE,KAAOA,KAGzBb,EAAqB,2BA1BnB0B,IApDFC,UAAWtC,GAGb,SAASA,IACPuC,SAASC,iBAAiB,WAmC5B,SAAShC,EAAUiC,EAAOC,GAKxB/B,EAAqB,iBAJrB,WACEhB,EAAWoB,cAAc,eAAe4B,YAAcF,EACtD9C,EAAWoB,cAAc,qBAAqB4B,YAAcD,KAuChE,SAASE,EAAQC,GACK,sBAAhBA,EAAEC,OAAOC,IAIb3B,IAGF,SAASA,IACPzB,EAAWwB,oBAAoB,QAASyB,GACxCI,MAAMC,KAAK,iBAAiBC,KAAK,KAC/BvD,EAAWwD,KAAK,oBAAqB,QAIzC,SAASxC,EAAqByC,EAAMC,GAKlCL,MAAMM,KAAK,iBAJX,WACED,GAAWA,IACX1D,EAAWwD,KAAK,oBAAqBC,MAEIF,KAAK,KAC9CvD,EAAWsB,iBAAiB,QAAS2B,KAIzClD,EAAQ6D,gBAAkB,CACxBC,KApGF,SAAcC,GACZ7D,EAAY6D,EACZ9D,EAAa4B,SAASR,cAAc,iBAEhBpB,EAAWoB,cAAc,mCACjCE,iBAAiB,QAAS,KACpC+B,MAAMC,KAAK,iBACXtB,MAAM+B,UAAU,sCAElB/B,MAAMgC,kBAAkB,yBAA0B9D,EAAuBH,MAvB5E,CAoHEkE","sourcesContent":["/* global RoomView, OTHelper, Modal */\n\n!(exports => {\n  let shareError;\n  let _userName;\n\n  const screenShareCtrlEvents = {\n    shareScreenError: launchShareError,\n    extInstallationResult,\n    destroyed: destroyView\n  };\n\n  function destroyView() {\n    RoomView.deleteStreamView('desktop');\n  }\n\n  function init(aUserName) {\n    _userName = aUserName;\n    shareError = document.querySelector('.screen-modal');\n\n    const installLink = shareError.querySelector('#screenShareErrorInstall button');\n    installLink.addEventListener('click', () => {\n      Modal.hide('.screen-modal');\n      Utils.sendEvent('screenShareView:installExtension');\n    });\n    Utils.addEventsHandlers('screenShareController:', screenShareCtrlEvents, exports);\n  }\n\n  function launchShareError(evt) {\n    destroyView();\n\n    const status = evt.detail;\n    const errCodes = OTHelper.screenShareErrorCodes;\n    // Only if we really want to differentiate type of errors\n    // or show differents section or something like that\n    if (status.code === errCodes.accessDenied) {\n      showError('Error', status.message);\n    } else if (status.code === errCodes.extNotInstalled) {\n      showInstallExtension();\n    } else {\n      showError('Sharing screen failed.', status.message);\n    }\n  }\n\n  function showInstallExtension() {\n    showShareScreenError('error-installing');\n  }\n\n  function showError(title, description) {\n    function loadModalText() {\n      shareError.querySelector('.errorTitle').textContent = title;\n      shareError.querySelector('.errorDescription').textContent = description;\n    }\n    showShareScreenError('error-sharing', loadModalText);\n  }\n\n  function extInstallationResult(evt) {\n    const status = evt.detail;\n    if (status.error) {\n      showError('Installation failed.', status.message);\n    } else {\n      showInstallationSuccess();\n    }\n  }\n\n  function showInstallationSuccess() {\n    const btnCancel = shareError.querySelector('#scrShrLater');\n    const btnReload = shareError.querySelector('#scrShrReload');\n\n    btnCancel.addEventListener('click', function btnCancelReload() {\n      btnCancel.removeEventListener('click', btnCancelReload);\n      hideShareScreenError();\n    });\n\n    btnReload.addEventListener('click', function btnConfirmReload() {\n      btnReload.removeEventListener('click', btnConfirmReload);\n      const location = document.location;\n      let href = location.href;\n      if (href.indexOf('?userName=') < 0) {\n        const params = Utils.parseSearch(document.location.search).params;\n        params.userName = _userName;\n        const search = Utils.generateSearchStr(params);\n        href = `${location.protocol}//${location.hostname}:${location.port}${location.pathname}${search}`;\n      }\n      window.location.href = href;\n    });\n\n    showShareScreenError('successful-installation');\n  }\n\n  function onClick(e) {\n    if (e.target.id !== 'screenShareErrors') {\n      return;\n    }\n\n    hideShareScreenError();\n  }\n\n  function hideShareScreenError() {\n    shareError.removeEventListener('click', onClick);\n    Modal.hide('.screen-modal').then(() => {\n      shareError.data('screenSharingType', null);\n    });\n  }\n\n  function showShareScreenError(type, preLoad) {\n    function loadModalText() {\n      preLoad && preLoad();\n      shareError.data('screenSharingType', type);\n    }\n    Modal.show('.screen-modal', loadModalText).then(() => {\n      shareError.addEventListener('click', onClick);\n    });\n  }\n\n  exports.ScreenShareView = {\n    init\n  };\n})(this);\n"]}