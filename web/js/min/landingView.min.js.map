{"version":3,"sources":["web/js/landingView.js"],"names":["global","user","enterButton","form","roomLabelElem","userLabelElem","errorMessage","performInit","document","getElementById","querySelector","resetForm","storedUsername","window","localStorage","getItem","value","classList","add","location","hostname","indexOf","style","display","fields","querySelectorAll","Array","prototype","map","call","field","checked","focus","addEventListener","onKeyup","onFocus","removeEventListener","this","id","remove","opacity","length","LandingView","init","showUnavailable","Promise","resolve","EJSTemplate","url","render","then","aHTML","body","insertAdjacentHTML","showTos"],"mappings":"AAEC,CAACA,IACA,IACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEF,MAoBMC,EAAc,KAClBL,EAAcM,SAASC,eAAe,SACtCR,EAAOO,SAASC,eAAe,QAC/BN,EAAOK,SAASE,cAAc,QAC9BN,EAAgBI,SAASC,eAAe,cACxCJ,EAAgBG,SAASC,eAAe,cACxCH,EAAeE,SAASE,cAAc,eACtCC,IACA,MAAMC,EAAiBC,OAAOC,aAAaC,QAAQ,YAC/CH,GAAkBX,IACpBA,EAAKe,MAAQJ,EACbP,EAAcY,UAAUC,IAAI,YAE6B,IAAvDL,OAAOM,SAASC,SAASC,QAAQ,oBACnCb,SAASE,cAAc,gBAAgBY,MAAMC,QAAU,UA6B3D,IAAIZ,EAAY,KACd,MAAMa,EAAShB,SAASiB,iBAAiB,cACzCC,MAAMC,UAAUC,IAAIC,KAAKL,EAAQM,IAC/BA,EAAMd,MAAQ,GACdc,EAAMC,SAAU,EACZ9B,IACFA,EAAK+B,QACL/B,EAAKgC,iBAAiB,QAASC,GAC/BjC,EAAKgC,iBAAiB,QAASE,OAMjCD,EAAU,KACZ7B,EAAcY,UAAUC,IAAI,WAC5BjB,EAAKmC,oBAAoB,QAASD,IAGhCA,EAAU,WACI,SAAZE,KAAKC,IACPhC,EAAaW,UAAUsB,OAAO,QAC9B/B,SAASC,eAAe,cAAca,MAAMkB,QAAU,EACtDpC,EAAca,UAAUC,IAAI,WACyB,IAAjDV,SAASC,eAAe,QAAQO,MAAMyB,QACxCpC,EAAcY,UAAUsB,OAAO,aAGjClC,EAAcY,UAAUC,IAAI,WACyB,IAAjDV,SAASC,eAAe,QAAQO,MAAMyB,QACxCrC,EAAca,UAAUsB,OAAO,aA+FpCF,KAHMK,YAAc,CACnBC,KApJW,KACPC,gBA5BG,IAAIC,QAAQC,IACG,IAAIC,YAAY,CAAEC,IAAK,+BAC/BC,SAASC,KAAKC,IACxB3C,SAAS4C,KAAKC,mBAAmB,aAAcF,GAC/CL,QAyBwBI,KAAK3C,GACtB+C,QAxCJ,IAAIT,QAAQC,IACG,IAAIC,YAAY,CAAEC,IAAK,uBAC/BC,SAASC,KAAKC,IACxB3C,SAAS4C,KAAKC,mBAAmB,aAAcF,GAC/CL,QAqCgBI,KAAK3C,GAEvBA,OArDL","sourcesContent":["/* global EJSTemplate, Modal, showTos, showUnavailable, minMeetingNameLength, Utils */\n\n!(global => {\n  let room,\n    user,\n    enterButton,\n    form,\n    roomLabelElem,\n    userLabelElem,\n    errorMessage;\n\n  const loadTosTemplate = () => {\n    return new Promise(resolve => {\n      const tosTemplate = new EJSTemplate({ url: '/templates/tos.ejs' });\n      tosTemplate.render().then(aHTML => {\n        document.body.insertAdjacentHTML('afterbegin', aHTML);\n        resolve();\n      });\n    });\n  };\n\n  const loadUnavailableTemplate = () => {\n    return new Promise(resolve => {\n      const tosTemplate = new EJSTemplate({ url: '/templates/unavailable.ejs' });\n      tosTemplate.render().then(aHTML => {\n        document.body.insertAdjacentHTML('afterbegin', aHTML);\n        resolve();\n      });\n    });\n  };\n\n  const performInit = () => {\n    enterButton = document.getElementById('enter');\n    user = document.getElementById('user');\n    form = document.querySelector('form');\n    roomLabelElem = document.getElementById('room-label');\n    userLabelElem = document.getElementById('user-label');\n    errorMessage = document.querySelector('.error-room');\n    resetForm();\n    const storedUsername = window.localStorage.getItem('username');\n    if (storedUsername && user) {\n      user.value = storedUsername;\n      userLabelElem.classList.add('visited');\n    }\n    if (window.location.hostname.indexOf('opentokrtc.com') === 0) {\n      document.querySelector('.safari-plug').style.display = 'block';\n    }\n  };\n\n  const init = () => {\n    if (showUnavailable) {\n      loadUnavailableTemplate().then(performInit);\n    } else if (showTos) {\n      loadTosTemplate().then(performInit);\n    } else {\n      performInit();\n    }\n  };\n\n  const isValid = () => {\n    let formValid = true;\n\n    if (room.value.length < minMeetingNameLength) {\n      const messageText = (room.value.length === 0) ?\n        'Please enter a meeting name' :\n        `The meeting name must be at least ${minMeetingNameLength} characters`;\n      errorMessage.querySelector('span').innerHTML = messageText;\n      errorMessage.classList.add('show');\n      formValid = false;\n    }\n\n    return formValid;\n  };\n\n  var resetForm = () => {\n    const fields = document.querySelectorAll('form input');\n    Array.prototype.map.call(fields, field => {\n      field.value = '';\n      field.checked = false;\n      if (user) {\n        user.focus();\n        user.addEventListener('keyup', onKeyup);\n        user.addEventListener('focus', onFocus);\n      }\n      if (room) room.addEventListener('focus', onFocus);\n    });\n  };\n\n  var onKeyup = () => {\n    userLabelElem.classList.add('visited');\n    user.removeEventListener('keyup', onFocus);\n  };\n\n  var onFocus = function () {\n    if (this.id === 'room') {\n      errorMessage.classList.remove('show');\n      document.getElementById('room-label').style.opacity = 1;\n      roomLabelElem.classList.add('visited');\n      if (document.getElementById('user').value.length === 0) {\n        userLabelElem.classList.remove('visited');\n      }\n    } else {\n      userLabelElem.classList.add('visited');\n      if (document.getElementById('room').value.length === 0) {\n        roomLabelElem.classList.remove('visited');\n      }\n    }\n  };\n\n  const showUnavailableMessage = () => {\n    const selector = '.tc-modal.unavailable';\n    return Modal.show(selector);\n  };\n\n  const showContract = () => {\n    const selector = '.tc-modal.contract';\n    const acceptElement = document.querySelector(`${selector} .accept`);\n\n    return Modal.show(selector)\n      .then(() => {\n        return new Promise(resolve => {\n          acceptElement.addEventListener('click', function onClicked(evt) {\n            acceptElement.removeEventListener('click', onClicked);\n            resolve(true);\n            evt.preventDefault();\n            Modal.hide(selector);\n          });\n\n          Utils.addEventsHandlers('modal:', {\n            close() {\n              resolve();\n            }\n          });\n        });\n      });\n  };\n\n  const navigateToRoom = () => {\n    let url = window.location.origin\n      .concat('/room/', encodeURIComponent(Utils.htmlEscape(room.value)));\n    const userName = encodeURIComponent(Utils.htmlEscape(user.value.trim()));\n    if (userName) {\n      url = url.concat('?userName=', userName);\n    }\n    window.location.href = url;\n  };\n\n  const triggerEnterClick = event => {\n    const code = event.keyCode || event.which;\n\n    if (code === 13) {\n      event.preventDefault();\n      enterButton.click();\n    }\n  };\n\n  const addHandlers = () => {\n    enterButton.addEventListener('click', function onEnterClicked(event) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n\n      if (!isValid()) {\n        form.classList.add('error');\n        room.blur();\n        document.getElementById('room-label').style.opacity = 0;\n        return;\n      }\n\n      form.classList.remove('error');\n      enterButton.removeEventListener('click', onEnterClicked);\n\n      if (showUnavailable) {\n        showUnavailableMessage();\n      } else if (showTos) {\n        showContract().then(accepted => {\n          if (accepted) {\n            sessionStorage.setItem('tosAccepted', true);\n            navigateToRoom();\n          } else {\n            addHandlers();\n          }\n        });\n      } else {\n        navigateToRoom();\n      }\n    });\n\n    room.addEventListener('keypress', function onKeypress() {\n      errorMessage.classList.remove('show');\n    });\n\n    room.addEventListener('keydown', triggerEnterClick, false);\n\n    user.addEventListener('keydown', triggerEnterClick, false);\n  };\n\n  global.LandingView = {\n    init\n  };\n})(this);\n"]}