{"version":3,"sources":["web/js/precallController.js"],"names":["exports","otNetworkTest","publisher","previewOptions","publisherOptions","publishAudio","publishVideo","name","width","height","insertMode","showControls","storedAudioDeviceId","window","localStorage","getItem","storedVideoDeviceId","audioSource","videoSource","eventHandlers","roomView:endprecall","Utils","sendEvent","PrecallController","init","Promise","resolve","LazyLoader","dependencyLoad","then","addEventsHandlers","PrecallView","showCallSettingsPrompt","roomName","username","otHelper","selector","videoPreviewEventHandlers","[object Object]","toggleFacingMode","dev","deviceId","setItem","evt","detail","setAudioSource","status","startPrecallTestMeter","startNetworkTest","error","result","displayNetworkTestResults","hideConnectivityTest","stopTest","routedFromStartMeeting","userName","document","querySelector","value","trim","otLoaded","hidePrecall","hide","destroy","setTimeout","submitForm","location","href","indexOf","reject","Request","getRoomRawInfo","room","showUnavailable","Error","isLocked","showTos","showContract","catch","e","message","showLockedMessage","showUnavailableMessage","setFocus","isSafariIOS","enablePrecallTest","disabled","addEventListener","event","which","preventDefault","initPublisher","pub","getVideoDeviceNotInUse","videoSourceId","apiKey","precallApiKey","resolution","sessionId","precallSessionId","token","precallToken","on","getDevices","audioDevs","populateAudioDevicesDropdown","OTNetworkTest","audioOnly","movingAvg","audioLevel","logLevel","Math","log","LN10","min","max","setVolumeMeterLevel","userNameInputElement","getElementById","storedUsername","style","display","setAttribute","classList","add","this"],"mappings":"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","sourcesContent":["// eslint-disable-next-line no-unused-vars\n/* global Modal, OTNetworkTest, PrecallView, showTos, showUnavailable */\n\n!(exports => {\n  const endPrecall = () => {\n    Utils.sendEvent('PrecallController:endPrecall');\n  };\n  let otNetworkTest;\n  let publisher;\n  let previewOptions;\n  const publisherOptions = {\n    publishAudio: true,\n    publishVideo: true,\n    name: '',\n    width: '100%',\n    height: '100%',\n    insertMode: 'append',\n    showControls: false\n  };\n\n  const storedAudioDeviceId = window.localStorage.getItem('audioDeviceId');\n  const storedVideoDeviceId = window.localStorage.getItem('videoDeviceId');\n  if (storedAudioDeviceId) publisherOptions.audioSource = storedAudioDeviceId;\n  if (storedVideoDeviceId) publisherOptions.videoSource = storedVideoDeviceId;\n\n  function showCallSettingsPrompt(roomName, username, otHelper) {\n    const selector = '.user-name-modal';\n\n    const videoPreviewEventHandlers = {\n      toggleFacingMode() {\n        otHelper.toggleFacingMode().then(dev => {\n          const deviceId = dev.deviceId;\n          publisherOptions.videoSource = deviceId;\n          window.localStorage.setItem('videoDeviceId', deviceId);\n        });\n      },\n      setAudioSource(evt) {\n        const deviceId = evt.detail;\n        otHelper.setAudioSource(deviceId);\n        publisherOptions.audioSource = deviceId;\n        window.localStorage.setItem('audioDeviceId', deviceId);\n      },\n      initialAudioSwitch(evt) {\n        publisher.publishAudio(evt.detail.status);\n        publisherOptions.publishAudio = evt.detail.status;\n      },\n      initialVideoSwitch(evt) {\n        publisher.publishVideo(evt.detail.status);\n        publisherOptions.publishVideo = evt.detail.status;\n      },\n      retest() {\n        PrecallView.startPrecallTestMeter();\n        otNetworkTest.startNetworkTest((error, result) => {\n          if (!error) {\n            PrecallView.displayNetworkTestResults(result);\n          }\n        });\n      },\n      cancelTest() {\n        PrecallView.hideConnectivityTest();\n        otNetworkTest.stopTest();\n      }\n    };\n\n    return new Promise(resolve => {\n      if (window.routedFromStartMeeting) {\n        publisherOptions.name = window.userName || document.querySelector(`${selector} input`).value.trim();\n        return resolve({\n          username: window.userName || document.querySelector(`${selector} input`).value.trim(),\n          publisherOptions\n        });\n      }\n\n      function loadModalText() {\n        PrecallView.setFocus(username);\n\n        if (Utils.isSafariIOS()) {\n          if (window.enablePrecallTest) PrecallView.hideConnectivityTest();\n        }\n\n        document.querySelector('.user-name-modal #enter').disabled = false;\n        document.querySelector('.user-name-modal').addEventListener('keypress', event => {\n          if (event.which === 13) {\n            event.preventDefault();\n            submitForm();\n          }\n        });\n\n        document.querySelector('.user-name-modal').addEventListener('submit', event => {\n          event.preventDefault();\n          submitForm();\n        });\n\n        function hidePrecall() {\n          PrecallView.hide();\n          publisher && publisher.destroy();\n          otNetworkTest && otNetworkTest.stopTest();\n          const username = document.querySelector(`${selector} input`).value.trim();\n          window.localStorage.setItem('username', username);\n          publisherOptions.name = username;\n          setTimeout(() => {\n            resolve({\n              username,\n              publisherOptions\n            });\n          }, 1);\n        }\n\n        function submitRoomForm() {\n          function isAllowedToJoin() {\n            return new Promise((resolve, reject) => {\n              Request\n                .getRoomRawInfo(roomName).then((room) => {\n                  if (window.routedFromStartMeeting) {\n                    return resolve();\n                  } else if (showUnavailable && !room) {\n                    return reject(new Error('New rooms not allowed'));\n                  } else if (room && !room.isLocked) {\n                    return resolve();\n                  } else if (!showUnavailable && !room) {\n                    return resolve();\n                  } else if (room && room.isLocked) {\n                    return reject(new Error('Room locked'));\n                  }\n                  // default\n                  return reject(new Error('Unknown Room State'));\n                });\n            });\n          }\n\n          isAllowedToJoin().then(() => {\n            if (showTos) {\n              PrecallView.showContract().then(hidePrecall);\n            } else {\n              hidePrecall();\n            }\n          }).catch((e) => {\n            if (e.message === 'Room locked') {\n              PrecallView.showLockedMessage();\n            } else {\n              PrecallView.showUnavailableMessage();\n            }\n          });\n        }\n\n        function submitForm() {\n          if (window.location.href.indexOf('room') > -1) {\n            // Jeff to do: This code should move to RoomController and be event-driven\n            submitRoomForm();\n          } else if (showTos) {\n            PrecallView.showContract().then(() => {\n              Utils.sendEvent('precallView:submit');\n            });\n          } else {\n            Utils.sendEvent('precallView:submit');\n          }\n        }\n\n        otHelper.initPublisher('video-preview', publisherOptions)\n          .then(pub => {\n            publisher = pub;\n\n            otHelper.getVideoDeviceNotInUse(publisherOptions.videoSource)\n              .then(videoSourceId => {\n                previewOptions = {\n                  apiKey: window.precallApiKey,\n                  resolution: '640x480',\n                  sessionId: window.precallSessionId,\n                  token: window.precallToken,\n                  videoSource: videoSourceId\n                };\n\n                publisher.on('accessAllowed', () => {\n                  otHelper.getDevices('audioInput').then(audioDevs => {\n                    // eslint-disable-next-line max-len\n                    PrecallView.populateAudioDevicesDropdown(audioDevs, publisherOptions.audioSource);\n                  });\n                  // You cannot use the network test in Safari because you cannot use two\n                  // eslint-disable-next-line max-len\n                  // publishers (the preview publisher and the network test publisher) simultaneously.\n                  if (!Utils.isSafariIOS() && window.enablePrecallTest) {\n                    PrecallView.startPrecallTestMeter();\n                    otNetworkTest = new OTNetworkTest(previewOptions);\n                    otNetworkTest.startNetworkTest((error, result) => {\n                      PrecallView.displayNetworkTestResults(result);\n                      if (result.audioOnly) {\n                        publisher.publishVideo(false);\n                        Utils.sendEvent('PrecallController:audioOnly');\n                      }\n                    });\n                  }\n                });\n              });\n            Utils.addEventsHandlers('roomView:', videoPreviewEventHandlers, exports);\n            let movingAvg = null;\n            publisher.on('audioLevelUpdated', event => {\n              if (movingAvg === null || movingAvg <= event.audioLevel) {\n                movingAvg = event.audioLevel;\n              } else {\n                movingAvg = (0.8 * movingAvg) + (0.2 * event.audioLevel);\n              }\n\n              // 1.5 scaling to map the -30 - 0 dBm range to [0,1]\n              let logLevel = ((Math.log(movingAvg) / Math.LN10) / 1.5) + 1;\n              logLevel = Math.min(Math.max(logLevel, 0), 1);\n              PrecallView.setVolumeMeterLevel(logLevel);\n            });\n          });\n        const userNameInputElement = document.getElementById('user-name-input');\n        const storedUsername = window.localStorage.getItem('username');\n        if (username) {\n          document.getElementById('enter-name-prompt').style.display = 'none';\n          userNameInputElement.value = username;\n          userNameInputElement.setAttribute('readonly', true);\n        } else if (storedUsername) {\n          userNameInputElement.value = storedUsername;\n          document.querySelector('#enter-name-prompt label').classList.add('visited');\n        }\n      }\n      otHelper.otLoaded.then(loadModalText);\n    });\n  }\n\n  const eventHandlers = {\n    'roomView:endprecall': endPrecall\n  };\n\n  const init = () => {\n    return new Promise(resolve => {\n      LazyLoader.dependencyLoad([\n        '/js/helpers/ejsTemplate.js',\n        '/js/vendor/ejs_production.js',\n        '/js/min/precallView.min.js'\n      ]).then(() => {\n        Utils.addEventsHandlers('', eventHandlers);\n        return PrecallView.init();\n      }).then(() => {\n        resolve();\n      });\n    });\n  };\n\n  exports.PrecallController = {\n    init,\n    showCallSettingsPrompt\n  };\n})(this);\n"]}