{"version":3,"sources":["web/js/precallView.js"],"names":["exports","_precallTemplate","_unavailableTemplate","_lockedTemplate","_tosTemplate","testMeterInterval","render","resolve","templatePromises","showTos","push","Promise","all","then","htmlStrings","forEach","aHTML","document","body","insertAdjacentHTML","window","routedFromStartMeeting","querySelector","style","display","enablePrecallTest","preCallTestResults","getElementById","addEventListener","e","target","id","Utils","sendEvent","connectivityCancelElement","event","preventDefault","hideConnectivityTest","userNameInputElement","keypressHandler","classList","add","removeEventListener","focus","initialVideoSwitch","initialAudioSwitch","setTimeout","activeElement","blur","elem","HTMLElems","getAncestorByTagName","select","Modal","showConfirm","head","detail","button","start","value","contains","setSwitchStatus","addHandlers","eventHandlers","PrecallController:endPrecall","_model","PrecallController:audioOnly","alreadyInitialized","showModal","removeEventHandlers","close","show","setTestMeterLevel","width","offsetWidth","status","switchName","evtName","elementId","domElem","labelElement","oldStatus","newStatus","undefined","toggle","innerText","remove","this","PrecallView","init","addEventsHandlers","EJSTemplate","url","hide","populateAudioDevicesDropdown","audioDevices","selectedDevId","device","option","createElement","text","label","deviceId","selected","appendChild","setFocus","username","focusElement","setVolumeMeterLevel","level","showContract","selector","acceptElement","onClicked","evt","sessionStorage","setItem","showUnavailableMessage","showLockedMessage","startPrecallTestMeter","meterLevel","preCallTestProgress","setInterval","clearInterval","displayNetworkTestResults","results","packetLossStr","Math","round","audio","bitsPerSecond","video","isNaN","packetLossRatio","precallHeadingElement","classification","setAttribute"],"mappings":"AAEC,CAACA,IAEA,IAAIC,EAGJ,IAAIC,EAEJ,IAAIC,EACAC,EAEAC,EAkGJ,SAASC,EAAOC,GAEd,MAAMC,EAAmB,CAACP,EAAiBK,SAAUJ,EAAqBI,SAAUH,EAAgBG,UAChGG,SACFD,EAAiBE,KAAKN,EAAaE,UAErCK,QAAQC,IAAIJ,GAAkBK,KAAKC,IACjCA,EAAYC,QAAQC,IAClBC,SAASC,KAAKC,mBAAmB,aAAcH,KAG7CI,OAAOC,yBACTJ,SAASK,cAAc,SAASC,MAAMC,QAAU,OAChDjB,KA7Gc,MAClB,GAAIa,OAAOK,kBAAmB,CAC5B,MAAMC,EAAqBT,SAASU,eAAe,yBAEnDD,EAAmBE,iBAAiB,QAASC,IAE3C,OADaA,EAAEC,OACFC,IACX,IAAK,gBACHL,EAAmBH,MAAMC,QAAU,OACnC,MACF,IAAK,SACHE,EAAmBH,MAAMC,QAAU,OACnCP,SAASU,eAAe,uBAAuBJ,MAAMC,QAAU,eAC/DQ,MAAMC,UAAU,sBAKtB,MAAMC,EAA4BjB,SAASU,eAAe,uBAC1DO,EAA0BN,iBAAiB,QAASO,IAClDA,EAAMC,iBACNJ,MAAMC,UAAU,uBAChBC,EAA0BX,MAAMC,QAAU,OAC1CE,EAAmBH,MAAMC,QAAU,OACnCa,MAIJ,MAAMC,EAAuBrB,SAASU,eAAe,mBACrDW,EAAqBV,iBAAiB,YAAY,SAASW,IACzDtB,SAASK,cAAc,8BAA8BkB,UAAUC,IAAI,WACnEH,EAAqBI,oBAAoB,WAAYH,MAGvDtB,SAASK,cAAc,oBAAoBM,iBAAiB,QAAS,KACnEU,EAAqBK,UAGC1B,SAASK,cAAc,qBAE/BM,iBAAiB,QAASC,IACxC,MAAMe,EAAqB3B,SAASK,cAAc,uBAC5CuB,EAAqB5B,SAASK,cAAc,uBAElDwB,WAAW,KAET7B,SAAS8B,cAAcC,QACtB,GAGH,MAAMC,EAAOC,UAAUC,qBAAqBtB,EAAEC,OAAQ,KAEtD,GAAKmB,EAGL,OAAQA,EAAKlB,IACX,IAAK,sBACHC,MAAMC,UAAU,6BAChB,MAEF,IAAK,aAAc,CACjB,MAAMmB,EAASnC,SAASU,eAAe,kBACvCyB,EAAO7B,MAAMC,QAAU,eACvB6B,MAAMC,YAAY,CAChBC,KAAM,gBACNC,OAAQ,0DACRC,OAAQ,QACP,GAAM5C,KAAK6C,IACRA,GACF1B,MAAMC,UAAU,0BAA2BmB,EAAOO,OAEpDP,EAAO7B,MAAMC,QAAU,SAEzB,MAEF,IAAK,qBACEqB,EAAmBL,UAAUoB,SAAS,aAGzCC,GAAgB,EAAO,QAAS,+BAFhCA,GAAgB,EAAM,QAAS,+BAIjC,MAEF,IAAK,qBACEjB,EAAmBJ,UAAUoB,SAAS,aAGzCC,GAAgB,EAAO,QAAS,+BAFhCA,GAAgB,EAAM,QAAS,mCA0BrCC,GACI1C,OAAOK,oBACTR,SAASU,eAAe,iBAAiBJ,MAAMC,QAAU,OACzDP,SAASU,eAAe,sBAAsBJ,MAAMC,QAAU,SAEhEjB,MAIJ,MAAMwD,EAAgB,CACpBC,+BAAgC,iBA5H9BC,GA6HOrC,iBAAiB,QAAStB,GACjCA,KAEF4D,8BAA+B,WAC7BL,GAAgB,EAAO,QAAS,iCAUpC,IAAIxB,EAAuB,KACzBpB,SAASU,eAAe,iBAAiBJ,MAAMC,QAAU,OACzDP,SAASU,eAAe,sBAAsBJ,MAAMC,QAAU,QAchE,IAAI2C,GAAqB,EAEzB,MAkBMC,EAAY,KAChBpC,MAAMqC,oBAAoB,SAAU,CAAEC,MAAOF,IAC7Cf,MAAMkB,KAAK,qBA0Db,IAAIC,EAAoBb,IACtB,MAAMc,EAAQd,EAAQ1C,SAASU,eAAe,sBAAsB+C,YACpEzD,SAASU,eAAe,4BAA4BJ,MAAMkD,MAAWA,EAAH,MA6CpE,SAASZ,EAAgBc,EAAQC,EAAYC,GAC3C,MAAMC,EAAY,UAAUF,UACtBG,EAAU9D,SAASU,eAAemD,GAClCE,EAAeD,EAAQzD,cAAc,SACrC2D,EAAYF,EAAQvC,UAAUoB,SAAS,aAC7C,IAAIsB,OACWC,IAAXR,GACFO,EAAYH,EAAQvC,UAAU4C,OAAO,aACrCJ,EAAaK,UAAY,OAEzBH,EAAYP,EACRA,GACFI,EAAQvC,UAAUC,IAAI,aACtBuC,EAAaK,UAAY,OAEzBN,EAAQvC,UAAU8C,OAAO,aACzBN,EAAaK,UAAY,QAG7BH,IAAcD,GAAajD,MAAMC,UAAU4C,EAAS,CAAEF,OAAQO,IAgB/DK,KAbOC,YAAc,CACpBC,KApJW,IACJ,IAAI9E,QAAQJ,GACb4D,EACK5D,KAGTyB,MAAM0D,kBAAkB,GAAI3B,GAC5B9D,EAAmB,IAAI0F,YAAY,CAAEC,IA5Kb,2BA6KpBnF,UACFL,EAAe,IAAIuF,YAAY,CAAEC,IA5Kf,wBA8KpB1F,EAAuB,IAAIyF,YAAY,CAAEC,IA7Kb,+BA8K5BzF,EAAkB,IAAIwF,YAAY,CAAEC,IA5Kb,0BA6KvBzB,GAAqB,EACd7D,EAAOC,KAuIhBsF,KAjGW,KACX5E,SAASK,cAAc,SAASC,MAAMC,QAAU,OAChDQ,MAAMqC,oBAAoB,SAAU,CAAEC,MAAOF,KAgG7C0B,6BAnKmC,CAACC,EAAcC,KAClD,MAAM5C,EAASnC,SAASU,eAAe,kBACvCoE,EAAahF,QAAQkF,IACnB,MAAMC,EAASjF,SAASkF,cAAc,UACtCD,EAAOE,KAAOH,EAAOI,MACrBH,EAAOvC,MAAQsC,EAAOK,SAClBJ,EAAOvC,QAAUqC,IAAeE,EAAOK,UAAW,GACtDnD,EAAOoD,YAAYN,MA6JrBO,SA/KeC,IACf,MAAMC,EAAeD,EAAWzF,SAASU,eAAe,SACtDV,SAASU,eAAe,mBAC1BgF,GAAgBA,EAAahE,SA6K7BiE,oBA/F0BC,IAC1B5F,SAASU,eAAe,qBAAqBJ,MAAMkD,MAAmB,GAARoC,EAAH,MA+F3DC,aAxHmB,KACnB,MAAMC,EAAW,qBACXC,EAAgB/F,SAASK,cAAiByF,EAAH,YAC7C,OAAO1D,MAAMkB,KAAKwC,EAAU,MAAM,GAC/BlG,KAAK,IACG,IAAIF,QAAQJ,IACjByG,EAAcpF,iBAAiB,SAAS,SAASqF,EAAUC,GACzDF,EAActE,oBAAoB,QAASuE,GAC3CC,EAAI9E,iBACJ+E,eAAeC,QAAQ,eAAe,GACtC/D,MAAMwC,KAAKkB,GACXxG,OAGFyB,MAAM0D,kBAAkB,SAAU,CAAEpB,MAAOF,QA2GjDiD,uBAnI6B,IAEtBhE,MAAMkB,KADI,wBACW,MAAM,GAkIlC+C,kBA/HwB,IAEjBjE,MAAMkB,KADI,mBACW,MAAM,GA8HlCgD,sBA/F4B,KAC5B,MACMC,EAAavG,SAASU,eAAe,4BAC3CkC,GAAgB,EAAM,QAAS,+BAC/B5C,SAASK,cAAc,sBAAsB+D,UAAY,iCACzDmC,EAAWjG,MAAMkD,MAAQ,EACzB+C,EAAWjG,MAAM,wBAA0B,UAC3C,IAAIkG,EAAsB,EAC1BpH,EAAoBqH,YAAY,KAC9BD,IACAjD,EAAkBiD,EATM,KAAA,MAUpBA,GACFE,cAActH,IAEf,MAkFHuH,0BA1EgCC,IAChC,IAAIC,EAEJH,cAActH,GACdY,SAASK,cAAc,sBAAsB+D,UAAY,QACzDpE,SAASU,eAAe,4BAA4BJ,MAAM,wBAA0B,SACpFiD,EAAkB,GAClBvD,SAASU,eAAe,uBAAuBJ,MAAMC,QAAU,OAE/DP,SAASU,eAAe,yBAAyBJ,MAAMC,QAAU,QACjEP,SAASU,eAAe,iBAAiB0D,UACvC0C,KAAKC,MAAMH,EAAQI,MAAMC,cAAgB,KACvCL,EAAQM,OACVlH,SAASU,eAAe,iBAAiB0D,UACvC0C,KAAKC,MAAMH,EAAQM,MAAMD,cAAgB,KAC3CJ,EAAgBM,MAAMP,EAAQM,MAAME,iBAAmB,GAClDN,KAAKC,MAAM,IAAMH,EAAQM,MAAME,iBAAlC,gBACFpH,SAASU,eAAe,6BAA6B0D,UAAYyC,IAEjE7G,SAASU,eAAe,iBAAiB0D,UAAY,EACrDpE,SAASU,eAAe,6BAA6B0D,UAAY,aAEnE,MAAMiD,EAAwBrH,SAASU,eAAe,oBAEtD,OADA2G,EAAsB9F,UAAYqF,EAAQU,eAClCV,EAAQU,gBACd,IAAK,eACHD,EAAsBjD,UAAY,yBAClC,MACF,IAAK,kBACHiD,EAAsBjD,UAAY,kBAClC,MACF,IAAK,gBACHiD,EAAsBjD,UAAY,oBAGtCpE,SAASU,eAAe,wBAAwB0D,UAAYwC,EAAQzB,KACpEnF,SAASU,eAAe,gBAAgB6G,aAAa,YAAaX,EAAQU,gBAC1ET,EAAgBM,MAAMP,EAAQI,MAAMI,iBAAmB,GAClDN,KAAKC,MAAM,IAAMH,EAAQI,MAAMI,iBAAlC,gBACFpH,SAASU,eAAe,6BAA6B0D,UAAYyC,GAoCjEzF,qBAAAA,IApUH","sourcesContent":["// eslint-disable-next-line no-unused-vars\n/* globals EJSTemplate, Modal, setTimeout, showTos, showUnavailable, enablePrecallTest, enterButtonLabel */\n!(exports => {\n  const _precallTemplateSrc = '/templates/precall.ejs';\n  let _precallTemplate;\n  const _tosTemplateSrc = '/templates/tos.ejs';\n  const _unavailableTemplateSrc = '/templates/unavailable.ejs';\n  let _unavailableTemplate;\n  const _lockedTemplateSrc = '/templates/locked.ejs';\n  let _lockedTemplate;\n  let _tosTemplate;\n  let _model;\n  let testMeterInterval;\n\n  const addHandlers = () => {\n    if (window.enablePrecallTest) {\n      const preCallTestResults = document.getElementById('pre-call-test-results');\n\n      preCallTestResults.addEventListener('click', e => {\n        const elem = e.target;\n        switch (elem.id) {\n          case 'precall-close':\n            preCallTestResults.style.display = 'none';\n            break;\n          case 'retest':\n            preCallTestResults.style.display = 'none';\n            document.getElementById('connectivity-cancel').style.display = 'inline-block';\n            Utils.sendEvent('roomView:retest');\n            break;\n        }\n      });\n\n      const connectivityCancelElement = document.getElementById('connectivity-cancel');\n      connectivityCancelElement.addEventListener('click', event => {\n        event.preventDefault();\n        Utils.sendEvent('roomView:cancelTest');\n        connectivityCancelElement.style.display = 'none';\n        preCallTestResults.style.display = 'none';\n        hideConnectivityTest();\n      });\n    }\n\n    const userNameInputElement = document.getElementById('user-name-input');\n    userNameInputElement.addEventListener('keypress', function keypressHandler() {\n      document.querySelector('.user-name-input-container').classList.add('visited');\n      userNameInputElement.removeEventListener('keypress', keypressHandler);\n    });\n\n    document.querySelector('.user-name-modal').addEventListener('click', () => {\n      userNameInputElement.focus();\n    });\n\n    const publishSettings = document.querySelector('.publish-settings');\n\n    publishSettings.addEventListener('click', e => {\n      const initialVideoSwitch = document.querySelector('#initialVideoSwitch');\n      const initialAudioSwitch = document.querySelector('#initialAudioSwitch');\n\n      setTimeout(() => {\n        // This must be done asynchronously to hide the virtual keyboard in iOS:\n        document.activeElement.blur();\n      }, 1);\n\n      // pointer-events is not working on IE so we can receive as target a child\n      const elem = HTMLElems.getAncestorByTagName(e.target, 'a');\n\n      if (!elem) {\n        return;\n      }\n      switch (elem.id) {\n        case 'preToggleFacingMode': {\n          Utils.sendEvent('roomView:toggleFacingMode');\n          break;\n        }\n        case 'prePickMic': {\n          const select = document.getElementById('select-devices');\n          select.style.display = 'inline-block';\n          Modal.showConfirm({\n            head: 'Set mic input',\n            detail: 'Please identify the audio source in the following list:',\n            button: 'Set'\n          }, true).then(start => {\n            if (start) {\n              Utils.sendEvent('roomView:setAudioSource', select.value);\n            }\n            select.style.display = 'none';\n          });\n          break;\n        }\n        case 'initialAudioSwitch': {\n          if (!initialAudioSwitch.classList.contains('activated')) {\n            setSwitchStatus(true, 'Audio', 'roomView:initialAudioSwitch');\n          } else {\n            setSwitchStatus(false, 'Audio', 'roomView:initialAudioSwitch');\n          }\n          break;\n        }\n        case 'initialVideoSwitch': {\n          if (!initialVideoSwitch.classList.contains('activated')) {\n            setSwitchStatus(true, 'Video', 'roomView:initialVideoSwitch');\n          } else {\n            setSwitchStatus(false, 'Video', 'roomView:initialVideoSwitch');\n          }\n          break;\n        }\n      }\n    });\n\n  };\n\n  function render(resolve) {\n    // eslint-disable-next-line max-len\n    const templatePromises = [_precallTemplate.render(), _unavailableTemplate.render(), _lockedTemplate.render()];\n    if (showTos) {\n      templatePromises.push(_tosTemplate.render());\n    }\n    Promise.all(templatePromises).then(htmlStrings => {\n      htmlStrings.forEach(aHTML => {\n        document.body.insertAdjacentHTML('afterbegin', aHTML);\n      });\n\n      if (window.routedFromStartMeeting) {\n        document.querySelector('.main').style.display = 'none';\n        resolve();\n      }\n      addHandlers();\n      if (window.enablePrecallTest) {\n        document.getElementById('pre-call-test').style.display = 'flex';\n        document.getElementById('precall-test-meter').style.display = 'block';\n      }\n      resolve();\n    });\n  }\n\n  const eventHandlers = {\n    'PrecallController:endPrecall': function () {\n      _model.addEventListener('value', render);\n      render();\n    },\n    'PrecallController:audioOnly': function () {\n      setSwitchStatus(false, 'Video', 'roomView:initialVideoSwitch');\n    }\n  };\n\n  const setFocus = username => {\n    const focusElement = username ? document.getElementById('enter') :\n      document.getElementById('user-name-input');\n    focusElement && focusElement.focus();\n  };\n\n  var hideConnectivityTest = () => {\n    document.getElementById('pre-call-test').style.display = 'none';\n    document.getElementById('precall-test-meter').style.display = 'none';\n  };\n\n  const populateAudioDevicesDropdown = (audioDevices, selectedDevId) => {\n    const select = document.getElementById('select-devices');\n    audioDevices.forEach(device => {\n      const option = document.createElement('option');\n      option.text = device.label;\n      option.value = device.deviceId;\n      if (option.value === selectedDevId) option.selected = true;\n      select.appendChild(option);\n    });\n  };\n\n  let alreadyInitialized = false;\n\n  const init = () => {\n    return new Promise(resolve => {\n      if (alreadyInitialized) {\n        return resolve();\n      }\n\n      Utils.addEventsHandlers('', eventHandlers);\n      _precallTemplate = new EJSTemplate({ url: _precallTemplateSrc });\n      if (showTos) {\n        _tosTemplate = new EJSTemplate({ url: _tosTemplateSrc });\n      }\n      _unavailableTemplate = new EJSTemplate({ url: _unavailableTemplateSrc });\n      _lockedTemplate = new EJSTemplate({ url: _lockedTemplateSrc });\n      alreadyInitialized = true;\n      return render(resolve);\n    });\n  };\n\n  const showModal = () => {\n    Utils.removeEventHandlers('modal:', { close: showModal });\n    Modal.show('.user-name-modal');\n  };\n\n  const showUnavailableMessage = () => {\n    const selector = '.tc-modal.unavailable';\n    return Modal.show(selector, null, true);\n  };\n\n  const showLockedMessage = () => {\n    const selector = '.tc-modal.locked';\n    return Modal.show(selector, null, true);\n  };\n\n  const showContract = () => {\n    const selector = '.tc-modal.contract';\n    const acceptElement = document.querySelector(`${selector} .accept`);\n    return Modal.show(selector, null, true)\n      .then(() => {\n        return new Promise(resolve => {\n          acceptElement.addEventListener('click', function onClicked(evt) {\n            acceptElement.removeEventListener('click', onClicked);\n            evt.preventDefault();\n            sessionStorage.setItem('tosAccepted', true);\n            Modal.hide(selector);\n            resolve();\n          });\n\n          Utils.addEventsHandlers('modal:', { close: showModal });\n        });\n      });\n  };\n\n  const hide = () => {\n    document.querySelector('.main').style.display = 'none';\n    Utils.removeEventHandlers('modal:', { close: showModal });\n  };\n\n  const setVolumeMeterLevel = level => {\n    document.getElementById('audio-meter-level').style.width = `${level * 89}px`;\n  };\n\n  const startPrecallTestMeter = () => {\n    const TEST_DURATION_MAX = 200; // 20 seconds\n    const meterLevel = document.getElementById('precall-test-meter-level');\n    setSwitchStatus(true, 'Video', 'roomView:initialVideoSwitch');\n    document.querySelector('#test-status label').innerText = 'Testing audio / video quality…';\n    meterLevel.style.width = 0;\n    meterLevel.style['animation-play-state'] = 'running';\n    let preCallTestProgress = 0;\n    testMeterInterval = setInterval(() => {\n      preCallTestProgress++;\n      setTestMeterLevel(preCallTestProgress / TEST_DURATION_MAX);\n      if (preCallTestProgress === TEST_DURATION_MAX) {\n        clearInterval(testMeterInterval);\n      }\n    }, 100);\n  };\n\n  var setTestMeterLevel = value => {\n    const width = value * document.getElementById('precall-test-meter').offsetWidth;\n    document.getElementById('precall-test-meter-level').style.width = `${width}px`;\n  };\n\n  const displayNetworkTestResults = results => {\n    let packetLossStr;\n\n    clearInterval(testMeterInterval);\n    document.querySelector('#test-status label').innerText = 'Done.';\n    document.getElementById('precall-test-meter-level').style['animation-play-state'] = 'paused';\n    setTestMeterLevel(1);\n    document.getElementById('connectivity-cancel').style.display = 'none';\n\n    document.getElementById('pre-call-test-results').style.display = 'block';\n    document.getElementById('audio-bitrate').innerText =\n      Math.round(results.audio.bitsPerSecond / 1000);\n    if (results.video) {\n      document.getElementById('video-bitrate').innerText =\n        Math.round(results.video.bitsPerSecond / 1000);\n      packetLossStr = isNaN(results.video.packetLossRatio) ? '' :\n        `${Math.round(100 * results.video.packetLossRatio)}% packet loss`;\n      document.getElementById('precall-video-packet-loss').innerText = packetLossStr;\n    } else {\n      document.getElementById('video-bitrate').innerText = 0;\n      document.getElementById('precall-video-packet-loss').innerText = 'No video.';\n    }\n    const precallHeadingElement = document.getElementById('pre-call-heading');\n    precallHeadingElement.classList = results.classification;\n    switch (results.classification) {\n      case 'precall-tick':\n        precallHeadingElement.innerText = 'Excellent Connectivity';\n        break;\n      case 'precall-warning':\n        precallHeadingElement.innerText = 'OK Connectivity';\n        break;\n      case 'precall-error':\n        precallHeadingElement.innerText = 'Poor Connectivity';\n        break;\n    }\n    document.getElementById('pre-call-description').innerText = results.text;\n    document.getElementById('precall-icon').setAttribute('data-icon', results.classification);\n    packetLossStr = isNaN(results.audio.packetLossRatio) ? '' :\n      `${Math.round(100 * results.audio.packetLossRatio)}% packet loss`;\n    document.getElementById('precall-audio-packet-loss').innerText = packetLossStr;\n  };\n\n  function setSwitchStatus(status, switchName, evtName) {\n    const elementId = `initial${switchName}Switch`;\n    const domElem = document.getElementById(elementId);\n    const labelElement = domElem.querySelector('label');\n    const oldStatus = domElem.classList.contains('activated');\n    let newStatus;\n    if (status === undefined) {\n      newStatus = domElem.classList.toggle('activated');\n      labelElement.innerText = 'On';\n    } else {\n      newStatus = status;\n      if (status) {\n        domElem.classList.add('activated');\n        labelElement.innerText = 'On';\n      } else {\n        domElem.classList.remove('activated');\n        labelElement.innerText = 'Off';\n      }\n    }\n    newStatus !== oldStatus && Utils.sendEvent(evtName, { status: newStatus });\n  }\n\n  exports.PrecallView = {\n    init,\n    hide,\n    populateAudioDevicesDropdown,\n    setFocus,\n    setVolumeMeterLevel,\n    showContract,\n    showUnavailableMessage,\n    showLockedMessage,\n    startPrecallTestMeter,\n    displayNetworkTestResults,\n    hideConnectivityTest\n  };\n})(this);\n"]}