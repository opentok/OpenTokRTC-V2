{"version":3,"sources":["web/js/screenShareController.js"],"names":["globals","debug","_chromeExtId","_isSharing","_hasPendingOperation","otHelper","enableAnnotations","screenPublisherOptions","insertMode","width","height","name","showControls","style","nameDisplayMode","publishAudio","videoSource","streamHandlers","[object Object]","Utils","sendEvent","roomViewEvents","stopShareScreen","desktopElement","RoomView","createStreamView","type","controlElems","shareScreen","then","isSharing","catch","error","code","OTHelper","screenShareErrorCodes","accessDenied","deleteStreamView","message","screenShareViewEvents","newTab","window","open","ScreenShareController","init","aUserName","aChromeExtId","aOTHelper","aEnableAnnotations","LazyLoader","dependencyLoad","MultiLevelLogger","DEFAULT_LEVELS","all","addEventsHandlers","registerScreenShareExtension","chrome","ScreenShareView","chromeExtId","this"],"mappings":"AAEC,CAACA,IACA,IAAIC,EACAC,EACAC,EACAC,GAAuB,EAG3B,IAAIC,EACAC,GAAoB,EAExB,MAAMC,EAAyB,CAC7BC,WAAY,SACZC,MAAO,OACPC,OAAQ,OACRC,KAAM,SACNC,cAAc,EACdC,MAAO,CACLC,gBAAiB,OAEnBC,cAAc,EACdC,YAAa,UAGTC,EAAiB,CACrBC,YACEf,GAAa,EACbgB,MAAMC,UAAU,mCAChBd,GAAqBa,MAAMC,UAAU,2CAInCC,EAAiB,CACrBH,cACE,IAAId,EAIJ,GAAID,EACFE,EAASiB,kBACTnB,GAAa,MAER,CACL,MAAMoB,EAAiBC,SAASC,iBAAiB,UAAW,CAC1Dd,KAAMJ,EAAuBI,KAC7Be,KAAM,UACNC,aAAc,KAEhBvB,GAAuB,EACvBC,EAASuB,YAAYL,EAAgBhB,EAAwBU,EAC3DX,GACCuB,KAAK,KACJ1B,GAAa,EACbC,GAAuB,EACvBe,MAAMC,UAAU,gDACd,CAAEU,UAAW3B,IACfG,GAAqBa,MAAMC,UAAU,6CAEtCW,MAAMC,IACL5B,GAAuB,EACnB4B,EAAMC,OAASC,SAASC,sBAAsBC,aAChDZ,SAASa,iBAAiB,WAE1BlB,MAAMC,UAAU,yCACd,CAAEa,KAAMD,EAAMC,KAAMK,QAASN,EAAMM,eAO3CC,EAAwB,CAC5BrB,mBACE,MAAMsB,EAASC,OAAOC,KAAK,6CAA6CxC,EAAgB,UAClF8B,GAASQ,GAA4B,iBAAXA,EAChCrB,MAAMC,UAAU,8CAA+C,CAC7DY,MAAAA,EACAM,QAASN,EAAQ,gFAAkF,OAEjGA,GACF/B,EAAM+B,MAAM,mCAyBlB,MAAMW,EAAwB,CAC5BC,KArBF,SAAcC,EAAWC,EAAcC,EAAWC,GAChD,OAAOC,WAAWC,eAAe,CAC/B,mCACCrB,KAAK,KACNvB,EAAoB0C,EACpB3C,EAAW0C,EACX9C,EAAQ,IAAIkB,MAAMgC,iBAAiB,2BACjChC,MAAMgC,iBAAiBC,eAAeC,KAExClC,MAAMmC,kBAAkB,YAAajC,EAAgBrB,GACrDmB,MAAMmC,kBAAkB,mBAAoBf,EAAuBvC,GACnEG,GAAa,EACbI,EAAuBI,MAAQkC,GA1Fd,WADD,YA4FhB3C,EAAe4C,EACfA,GAAiC,cAAjBA,GACdZ,SAASqB,6BAA6B,CAAEC,OAAQV,GAAgB,GAClEW,gBAAgBb,KAAKC,MAMvBa,kBACE,OAAOxD,IAIXF,EAAQ2C,sBAAwBA,GA/GjC,CAgHEgB","sourcesContent":["/* global RoomView, OTHelper, ScreenShareView */\n\n!(globals => {\n  let debug;\n  let _chromeExtId;\n  let _isSharing;\n  let _hasPendingOperation = false;\n  const NAME_SUFFIX = '\\'s screen';\n  const DEFAULT_NAME = 'Unknown';\n  let otHelper;\n  let enableAnnotations = false;\n\n  const screenPublisherOptions = {\n    insertMode: 'append',\n    width: '100%',\n    height: '100%',\n    name: 'screen',\n    showControls: false,\n    style: {\n      nameDisplayMode: 'off'\n    },\n    publishAudio: false,\n    videoSource: 'screen'\n  };\n\n  const streamHandlers = {\n    destroyed() {\n      _isSharing = false;\n      Utils.sendEvent('screenShareController:destroyed');\n      enableAnnotations && Utils.sendEvent('screenShareController:annotationEnded');\n    }\n  };\n\n  const roomViewEvents = {\n    shareScreen() {\n      if (_hasPendingOperation) {\n        return;\n      }\n\n      if (_isSharing) {\n        otHelper.stopShareScreen();\n        _isSharing = false;\n        // We don't need to send this because desktop stream is sending a destroyed event.\n      } else {\n        const desktopElement = RoomView.createStreamView('desktop', {\n          name: screenPublisherOptions.name,\n          type: 'desktop',\n          controlElems: {}\n        });\n        _hasPendingOperation = true;\n        otHelper.shareScreen(desktopElement, screenPublisherOptions, streamHandlers,\n          enableAnnotations)\n          .then(() => {\n            _isSharing = true;\n            _hasPendingOperation = false;\n            Utils.sendEvent('screenShareController:changeScreenShareStatus',\n              { isSharing: _isSharing });\n            enableAnnotations && Utils.sendEvent('screenShareController:annotationStarted');\n          })\n          .catch(error => {\n            _hasPendingOperation = false;\n            if (error.code === OTHelper.screenShareErrorCodes.accessDenied) {\n              RoomView.deleteStreamView('desktop');\n            } else {\n              Utils.sendEvent('screenShareController:shareScreenError',\n                { code: error.code, message: error.message });\n            }\n          });\n      }\n    }\n  };\n\n  const screenShareViewEvents = {\n    installExtension() {\n      const newTab = window.open(`https://chrome.google.com/webstore/detail/${_chromeExtId}`, '_blank');\n      const error = !newTab || typeof newTab !== 'object';\n      Utils.sendEvent('screenShareController:extInstallationResult', {\n        error,\n        message: error ? 'It seems you have a Pop-Up blocker enabled. Please disabled it and try again.' : null\n      });\n      if (error) {\n        debug.error('Error opening Chrome Webstore');\n      }\n    }\n  };\n\n  function init(aUserName, aChromeExtId, aOTHelper, aEnableAnnotations) {\n    return LazyLoader.dependencyLoad([\n      '/js/min/screenShareView.min.js'\n    ]).then(() => {\n      enableAnnotations = aEnableAnnotations;\n      otHelper = aOTHelper;\n      debug = new Utils.MultiLevelLogger('screenShareController.js',\n        Utils.MultiLevelLogger.DEFAULT_LEVELS.all);\n\n      Utils.addEventsHandlers('roomView:', roomViewEvents, globals);\n      Utils.addEventsHandlers('screenShareView:', screenShareViewEvents, globals);\n      _isSharing = false;\n      screenPublisherOptions.name = (aUserName || DEFAULT_NAME) + NAME_SUFFIX;\n      _chromeExtId = aChromeExtId;\n      aChromeExtId && aChromeExtId !== 'undefined' &&\n        OTHelper.registerScreenShareExtension({ chrome: aChromeExtId }, 1);\n      ScreenShareView.init(aUserName);\n    });\n  }\n\n  const ScreenShareController = {\n    init,\n    get chromeExtId() {\n      return _chromeExtId;\n    }\n  };\n\n  globals.ScreenShareController = ScreenShareController;\n})(this);\n"]}