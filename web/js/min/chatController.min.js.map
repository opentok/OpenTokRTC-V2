{"version":3,"sources":["web/js/chatController.js"],"names":["exports","_hasStatus","debug","Utils","MultiLevelLogger","DEFAULT_LEVELS","all","eventsIn","_historyChat","loadHistoryChat","data","RoomStatus","get","i","l","length","sendEvent","set","otHelper","_chatHandlers","signal:chat","evt","JSON","parse","senderId","from","connectionId","push","[object Object]","newUsrName","connection","userName","this","isMyself","text","sendMsg","detail","sendSignal","then","catch","error","value","message","ChatController","init","aUsrId","aGlobalHandlers","listenedEvts","LazyLoader","dependencyLoad","updatedRemotely","name","handler","couldBeChanged","outgoingMessage","undefined","ChatView","aEvents","aAllHandlers","Array","isArray","forEach","aEvt","event","type","addHandlers"],"mappings":"AAiEC,CAACA,IACA,IAAIC,EAEJ,MAAMC,EACJ,IAAIC,MAAMC,iBAAiB,oBAAqBD,MAAMC,iBAAiBC,eAAeC,KAcxF,IAAIC,EAEAC,EAMJ,SAASC,IACP,IAAKR,EACH,OAEF,MAAMS,EAAOC,WAAWC,IANP,QAOjB,GAAIF,EAAM,CACRF,EAAeE,EACf,IAAK,IAAIG,EAAI,EAAGC,EAAIN,EAAaO,OAAQF,EAAIC,EAAGD,IAC9CV,MAAMa,UAAU,iCAAkC,CAAEN,KAAMF,EAAaK,UAGzEL,EAAe,GACfG,WAAWM,IAdI,OAcYT,GAI/B,IAAIU,EAEJ,MAAMC,EAAgB,CACpBC,cAAe,SAAUC,GAQvB,MAAMX,EAAOY,KAAKC,MAAMF,EAAIX,MAC5BA,EAAKc,SAAWH,EAAII,KAAKC,aACzBlB,EAAamB,KAAKjB,GAClBP,MAAMa,UAAU,iCAAkC,CAAEN,KAAAA,KAEtDkB,kBAAkBP,GAKhB,MAAMQ,EAAaP,KAAKC,MAAMF,EAAIS,WAAWpB,MAAMqB,SAC9CC,KAAKC,SAASZ,EAAIS,YAMrBZ,EAAWc,KALX7B,MAAMa,UAAU,+BAAgC,CAC9Ce,SAAUF,EACVK,KA7CU,yBAmDhBN,oBAAoBP,GAClBlB,MAAMa,UAAU,+BAAgC,CAC9Ce,SAAUT,KAAKC,MAAMF,EAAIS,WAAWpB,MAAMqB,SAC1CG,KArDe,wBA6DrB,SAASC,EAAQd,GACf,MAAMX,EAAOW,EAAIe,OACjB,OAAOlB,EAASmB,WAAW,OAAQ3B,GAChC4B,KAAK,KACJnC,MAAMa,UAAU,qCACfuB,MAAMC,IACPtC,EAAMsC,MAAM,kBAAmB9B,EAAKwB,KAAKO,MAAO,mBAAoBD,EAAME,WAqDhF1C,EAAQ2C,eAAiB,CACvBC,KA3BF,SAAcC,EAAQC,EAAiBC,GACrC,OAAOC,WAAWC,eAAe,CAC/B,4BACCX,KAAK,KACN/B,EAAW,CACT2C,gBAAiB,CACfC,KAAM,6BACNC,QAAS3C,EACT4C,gBAAgB,GAElBC,gBAAiB,CACfH,KAAM,2BACNC,QAASjB,IAGb3B,EAAe,GACfP,OAAqCsD,IAAvBvD,EAAQW,WACf6C,SAASZ,KAAKC,EAAQE,GAC1BT,KAAK,KA1BZ,IAA2BmB,EAZJC,EAyCf,OAFAzD,GAAcU,WAAWM,IAhHd,OAgH8BT,GA3BtBiD,EA4BDV,EA3BxBY,MAAMC,QAAQH,IAAYA,EAAQI,QAAQC,IACxC,MAAMC,EAAQxD,EAASuD,EAAKE,MAC5BD,GAASA,EAAMV,iBAAmBU,EAAMZ,KAAOW,EAAKX,QAEtDhD,MAAM8D,YAAY1D,GAjBGmD,EAyCMZ,EAxCtBa,MAAMC,QAAQF,KACjBA,EAAe,CAACA,IAElBA,EAAa/B,KAAKR,GACXuC,SAtGV,CAkJE1B","sourcesContent":["/* global ChatView, RoomStatus */\n\n/**\n * CHAT COMPONENT\n * They are formed by chatController.js chatView.js, chat.js and textProcessor.js\n * The chat module needs for work OTHelper.js and browser_utils.js\n * If you want to have the previous status and roomStatus at your connection you need\n * roomStatus.js too\n * INCOMING events: outside events that the module will listen for\n * You could change their default name calling init method with the appropiated variable\n * (explained later)\n * - updatedRemotely: This action should be fired to load the history of the chat (previous\n *                    messages to our connection)\n *   Default value: roomStatus:updatedRemotely\n * - chatVisibility: This action should be fired to change the status (visible or hidden)\n *                    of the chat.\n *   Default value: roomView:chatVisibility\n *\n * OUTGOING events: events that will be fired by the module\n * - incomingMessage: A new message has been received\n *   NAME: chatController:incomingMessage\n * - presenceEvent: A new event has been received. A event could be that a new user has\n *                  connected or disconnected.\n *   Name: chatController:presenceEvent\n * - messageDelivered: A message has been sended\n *   Name: chatController:messageDelivered\n * - outgoingMessage: A message has been sended\n *   name: chatView:outgoingMessage\n * - hidden: it will be fired when the chat has been hidden\n *   name: chat:hidden\n * - unreadMessage: There was received a message while the chat was hidden\n *   name: chatView:unreadMessage\n *\n *\n *                                            -----------------\n *        roomStatus:updatedRemotely         |                 |\n *  ---------------------------------------->|                 |\n *        chatController:MessageDelivered    |                 |\n *  <-------------------------------------*--|                 |\n *        chatController:incomingMessage  |  | ChatController  |\n *  <-----------------------------------*-)--|                 |\n *        chatController:presenceEvent  | |  |                 |\n *  <---------------------------------*-)-)--|                 |\n *                                  --)-)-)->|                 |\n *                                  | | | |  |                 |\n *                                  | | | |   -----------------\n *                                  | | | |\n *                                  | | | |   -----------------\n *                                  | | | -->|                 |\n *                                  | | ---->|                 |\n *                                  | ------>|                 |\n *        chatView:outgoingMessage  |        |                 |\n *  <-------------------------------*--------|    ChatView     |\n *        chatView:unreadMessage             |                 |\n *  <----------------------------------------|                 |\n *        roomView:chatVisibility            |                 |\n *  ---------------------------------------->|                 |\n *                                            -----------------\n *\n *        chat:hidden                         -----------------\n *  <----------------------------------------|      Chat       |\n *                                            -----------------\n *\n */\n\n!(exports => {\n  let _hasStatus;\n\n  const debug =\n    new Utils.MultiLevelLogger('chatController.js', Utils.MultiLevelLogger.DEFAULT_LEVELS.all);\n\n  // Contains an object foreach action.\n  // This enables to configure the name of the received event.\n  // The object key is the type of event which is waiting for\n  // Each action has:\n  //  - name: (mandatory) event name which is going to be listen for\n  //  - handler: (mandatory) function which is going to be executed as respond of the event\n  //  - target: (optional) who is listening for the event. It'll be global if it is not specified.\n  //  - couldBeChanged: we only allow to modify the event's name of the event that come from the\n  //                    outside (e.g.: roomView:chatVisibility and roomStatus:updatedRemotely).\n  //                    We don't allow to change the event's name originating inside the chat module\n  //                    whether it'll be listened for in other module's component\n  //                    (e.g. chatView:outgoingMessage)\n  let eventsIn;\n\n  let _historyChat;\n\n  const CONN_TEXT = 'has joined the call';\n  const DISCONN_TEXT = 'has left the call';\n  const STATUS_KEY = 'chat';\n\n  function loadHistoryChat() {\n    if (!_hasStatus) {\n      return;\n    }\n    const data = RoomStatus.get(STATUS_KEY);\n    if (data) {\n      _historyChat = data;\n      for (let i = 0, l = _historyChat.length; i < l; i++) {\n        Utils.sendEvent('chatController:incomingMessage', { data: _historyChat[i] });\n      }\n    } else {\n      _historyChat = [];\n      RoomStatus.set(STATUS_KEY, _historyChat);\n    }\n  }\n\n  let otHelper;\n\n  const _chatHandlers = {\n    'signal:chat': function (evt) {\n      // A signal of the specified type was received from the session. The\n      // SignalEvent class defines this event object. It includes the following\n      // properties:\n      // data — (String) The data string sent with the signal.\n      // from — (Connection) The Connection corresponding to the client that\n      //        sent with the signal.\n      // type — (String) The type assigned to the signal (if there is one).\n      const data = JSON.parse(evt.data);\n      data.senderId = evt.from.connectionId;\n      _historyChat.push(data);\n      Utils.sendEvent('chatController:incomingMessage', { data });\n    },\n    connectionCreated(evt) {\n      // Dispatched when an new client (including your own) has connected to the\n      // session, and for every client in the session when you first connect\n      // Session object also dispatches a sessionConnected evt when your local\n      // client connects\n      const newUsrName = JSON.parse(evt.connection.data).userName;\n      if (!this.isMyself(evt.connection)) {\n        Utils.sendEvent('chatController:presenceEvent', {\n          userName: newUsrName,\n          text: CONN_TEXT\n        });\n      } else {\n        otHelper = this;\n      }\n    },\n    connectionDestroyed(evt) {\n      Utils.sendEvent('chatController:presenceEvent', {\n        userName: JSON.parse(evt.connection.data).userName,\n        text: DISCONN_TEXT\n      });\n    }\n  };\n\n  /**\n   * Send the event received as a message\n   */\n  function sendMsg(evt) {\n    const data = evt.detail;\n    return otHelper.sendSignal('chat', data)\n      .then(() => {\n        Utils.sendEvent('chatController:messageDelivered');\n      }).catch(error => {\n        debug.error('Error sending [', data.text.value, '] to the group. ', error.message);\n      });\n  }\n\n  /**\n   * It receives an array of objects or an object with the handlers to be set on OT.session\n   */\n  function addOTHandlers(aAllHandlers) {\n    if (!Array.isArray(aAllHandlers)) {\n      aAllHandlers = [aAllHandlers];\n    }\n    aAllHandlers.push(_chatHandlers);\n    return aAllHandlers;\n  }\n\n  /**\n   * Set the listener for the application custom events. If receives an array\n   * with the new name for the event and it exists here change its name\n   */\n  function addEventsHandlers(aEvents) {\n    Array.isArray(aEvents) && aEvents.forEach(aEvt => {\n      const event = eventsIn[aEvt.type];\n      event && event.couldBeChanged && (event.name = aEvt.name);\n    });\n    Utils.addHandlers(eventsIn);\n  }\n\n  function init(aUsrId, aGlobalHandlers, listenedEvts) {\n    return LazyLoader.dependencyLoad([\n      '/js/min/chatView.min.js'\n    ]).then(() => {\n      eventsIn = {\n        updatedRemotely: {\n          name: 'roomStatus:updatedRemotely',\n          handler: loadHistoryChat,\n          couldBeChanged: true\n        },\n        outgoingMessage: {\n          name: 'chatView:outgoingMessage',\n          handler: sendMsg\n        }\n      };\n      _historyChat = [];\n      _hasStatus = (exports.RoomStatus !== undefined);\n      return ChatView.init(aUsrId, listenedEvts)\n        .then(() => {\n          _hasStatus && RoomStatus.set(STATUS_KEY, _historyChat);\n          addEventsHandlers(listenedEvts);\n          return addOTHandlers(aGlobalHandlers);\n        });\n    });\n  }\n\n  exports.ChatController = {\n    init\n  };\n})(this);\n"]}