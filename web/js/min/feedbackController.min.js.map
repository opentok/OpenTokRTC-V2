{"version":3,"sources":["web/js/feedbackController.js"],"names":["global","otHelper","eventHandlers","[object Object]","evt","report","detail","loggedEvent","action","partnerId","session","apiKey","sessionId","id","connectionId","connection","publisherId","audioScore","videoScore","description","clientSystemTime","Date","getTime","source","document","location","href","xhr","XMLHttpRequest","url","window","feedbackUrl","open","send","JSON","stringify","OT","reportIssue","error","reportId","reportIssueId","FeedbackController","init","aOTHelper","aReportIssueLevel","LazyLoader","load","then","Utils","addEventsHandlers","FeedbackView","this"],"mappings":"AAEC,CAACA,IACA,IAAIC,EAEJ,MAAMC,EAAgB,CACpBC,aAAaC,GACX,MAAMC,EAASD,EAAIE,OACbC,EAAc,CAClBC,OAAQ,iBACRC,UAAWR,EAASS,QAAQC,OAC5BC,UAAWX,EAASS,QAAQG,GAC5BC,aAAcb,EAASS,QAAQK,WAAWF,GAC1CG,YAAaf,EAASe,YACtBC,WAAYZ,EAAOY,WACnBC,WAAYb,EAAOa,WACnBC,YAAad,EAAOc,YACpBC,kBAAkB,IAAIC,MAAOC,UAC7BC,OAAQC,SAASC,SAASC,MAEtBC,EAAM,IAAIC,eACVC,EAAMC,OAAOC,YACnBJ,EAAIK,KAAK,OAAQH,GAAK,GACtBF,EAAIM,KAAKC,KAAKC,UAAU5B,KAE1BJ,cACE,MAAMI,EAAc,CAClBC,OAAQ,cACRC,UAAWR,EAASS,QAAQC,OAC5BC,UAAWX,EAASS,QAAQG,GAC5BC,aAAcb,EAASS,QAAQK,WAAWF,GAC1CG,YAAaf,EAASe,aAExBoB,GAAGC,YAAY,CAACC,EAAOC,KAChBD,IACH/B,EAAYiC,cAAgBD,OAgBpCvC,EAAOyC,mBAAqB,CAC1BC,KAXW,CAACC,EAAWC,IAChBC,WAAWC,KAAK,CACrB,gCACCC,KAAK,KACN9C,EAAW0C,EACXK,MAAMC,kBAAkB,gBAAiB/C,EAAeF,GACxDkD,aAAaR,KAAKE,OA7CvB,CAoDEO","sourcesContent":["/* global OT, FeedbackView */\n\n!(global => {\n  let otHelper;\n\n  const eventHandlers = {\n    sendFeedback(evt) {\n      const report = evt.detail;\n      const loggedEvent = {\n        action: 'SessionQuality',\n        partnerId: otHelper.session.apiKey,\n        sessionId: otHelper.session.id,\n        connectionId: otHelper.session.connection.id,\n        publisherId: otHelper.publisherId,\n        audioScore: report.audioScore,\n        videoScore: report.videoScore,\n        description: report.description,\n        clientSystemTime: new Date().getTime(),\n        source: document.location.href\n      };\n      const xhr = new XMLHttpRequest();\n      const url = window.feedbackUrl;\n      xhr.open('POST', url, true);\n      xhr.send(JSON.stringify(loggedEvent));\n    },\n    reportIssue() {\n      const loggedEvent = {\n        action: 'ReportIssue',\n        partnerId: otHelper.session.apiKey,\n        sessionId: otHelper.session.id,\n        connectionId: otHelper.session.connection.id,\n        publisherId: otHelper.publisherId\n      };\n      OT.reportIssue((error, reportId) => {\n        if (!error) {\n          loggedEvent.reportIssueId = reportId;\n        }\n      });\n    }\n  };\n\n  const init = (aOTHelper, aReportIssueLevel) => {\n    return LazyLoader.load([\n      '/js/min/feedbackView.min.js'\n    ]).then(() => {\n      otHelper = aOTHelper;\n      Utils.addEventsHandlers('feedbackView:', eventHandlers, global);\n      FeedbackView.init(aReportIssueLevel);\n    });\n  };\n\n  global.FeedbackController = {\n    init\n  };\n})(this);\n"]}