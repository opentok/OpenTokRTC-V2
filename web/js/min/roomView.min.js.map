{"version":3,"sources":["web/js/roomView.js"],"names":["exports","dock","handler","callControlsElem","feedbackButton","togglePublisherVideoElem","togglePublisherAudioElem","startArchivingElem","stopArchivingElem","annotateBtnElem","manageRecordingsElem","messageButtonElem","participantsStrElem","recordingsNumberElem","videoSwitch","audioSwitch","topBannerElem","screenElem","unreadCountElem","enableArchiveManager","enableSip","hideCallControlsTimer","hideFeedbackButtonTimer","overCallControls","overFeedbackButton","_unreadMsg","_chatHasBeenShown","chatVisible","MODAL_TXTS","mute","head","detail","button","muteRemotely","unmutedRemotely","join","lock","endCall","endLockedCall","altButton","sessionDisconnected","chromePublisherError","meetingFullError","maxUsersPerRoom","setUnreadMessages","count","textContent","setChatStatus","visible","classList","add","window","innerWidth","hideCallControls","remove","Utils","sendEvent","chatViews","[object Object]","chatEvents","document","body","data","hangoutEvents","event","status","contains","screenShareCtrEvents","changeScreenShareStatus","toggleScreenSharing","destroyed","bind","undefined","isSharing","setDisabled","roomControllerEvents","evt","name","setSwitchStatus","lockState","RoomView","menuLockIcon","getElementById","menuLockText","navBarStateIcon","innerHTML","setAttribute","style","display","Modal","flashMessage","isJoining","setAudioSwitchRemotely","showConfirm","participantsNumber","LayoutManager","removeAll","elements","querySelectorAll","Array","prototype","forEach","call","element","then","location","reload","isMuted","setPublisherAudioSwitchStatus","initHTMLElements","querySelector","showControls","setTimeout","hideFeedbackButton","showFeedbackButton","bubbleUp","domElem","evtName","oldStatus","newStatus","toggle","cronograph","getCronograph","Promise","resolve","LazyLoader","dependencyLoad","Cronograph","addHandlers","addEventListener","e","elem","target","HTMLElems","getAncestorByTagName","id","hasVideo","hasAudio","accept","altHasAccepted","BubbleFactory","get","hide","enableRoomLocking","getAttribute","select","start","value","blur","shouldDisable","preventDefault","addEventsHandlers","phonenumber","archive","duration","Math","round","Date","now","createdAt","flex","flexDirection","init","onModel","archives","ArchivesEventsListener","archiveId","onValue","removeEventListener","model","RecordingsController","gotModel","stop","enableHangoutScroll","aEnableArchiveManager","aEnableSip","visibility","textArea","urlToShare","origin","pathname","getURLtoShare","replaceText","removeProperty","recordingsNumber","showRoom","clearTimeout","showPublisherButtons","publisherOptions","publishVideo","publishAudio","createStreamView","streamId","type","controlBtns","append","deleteStreamView","showConfirmChangeMicStatus","this"],"mappings":"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","sourcesContent":["/* global RoomView, Cronograph, ArchivesEventsListener, RecordingsController, Modal,\nBubbleFactory, LayoutManager, $, maxUsersPerRoom */\n\n!(exports => {\n  // HTML elements for the view\n  let dock;\n  let handler;\n  let callControlsElem;\n  let feedbackButton;\n  let togglePublisherVideoElem;\n  let togglePublisherAudioElem;\n  let startArchivingElem;\n  let stopArchivingElem;\n  let annotateBtnElem;\n  let manageRecordingsElem;\n  let messageButtonElem;\n  let participantsStrElem;\n  let recordingsNumberElem;\n  let videoSwitch;\n  let audioSwitch;\n  let topBannerElem;\n  let screenElem;\n  let unreadCountElem;\n  let enableArchiveManager;\n  let enableSip;\n  let hideCallControlsTimer;\n  let hideFeedbackButtonTimer;\n  let overCallControls = false;\n  let overFeedbackButton = false;\n\n  let _unreadMsg = 0;\n  let _chatHasBeenShown = false;\n  let chatVisible = false;\n\n  const MODAL_TXTS = {\n    mute: {\n      head: 'Mute all participants, including yourself',\n      detail: 'Everyone will be notified and can click their <i data-icon=\"no_mic\"></i> button' +\n              ' to unmute themselves.',\n      button: 'Mute all participants'\n    },\n    muteRemotely: {\n      head: 'All participants microphones are being disabled in the call',\n      detail: 'If you want to keep talking, ' +\n              'you must manually enable your own microphone.',\n      button: 'I understand'\n    },\n    unmutedRemotely: {\n      head: 'Your microphone is now enabled in the call',\n      detail: 'If you want to remain muted, ' +\n              'you must manually disable your own microphone.',\n      button: 'I understand'\n    },\n    join: {\n      head: 'All participants are muted',\n      detail: 'You can unmute everyone by toggling the Mute all participants option. Or you can ' +\n              'unmute just yourself by clicking the microphone icon in the bottom menu.',\n      button: 'I understand'\n    },\n    lock: {\n      head: 'Do you want to lock the meeting?',\n      detail: 'When a meeting room is locked, no one else will be allowed to join the meeting. ' +\n              'Current participants who leave the meeting will not be allowed back in.',\n      button: 'Lock Meeting'\n    },\n    endCall: {\n      head: 'Do you want to leave the meeting?',\n      detail: 'The meeting will continue with the remaining participants.',\n      button: 'Leave meeting'\n    },\n    endLockedCall: {\n      head: 'Do you want to unlock the meeting before leaving?',\n      detail: 'The meeting will continue with the remaining participants. When a meeting room is locked, no one else will be allowed to join or re-join the meeting.',\n      button: 'Unlock and Leave',\n      altButton: 'Leave Without Unlocking'\n    },\n    sessionDisconnected: {\n      head: 'Session disconected',\n      detail: 'The connection to the OpenTok platform has been lost. Check your network ' +\n              'connectivity and press Reload to connect again.',\n      button: 'Reload'\n    },\n    chromePublisherError: {\n      head: 'Internal Chrome Error',\n      detail: 'Failed to acquire microphone. This is a known Chrome bug. Please completely quit ' +\n              'and restart your browser.',\n      button: 'Reload'\n    },\n    meetingFullError: {\n      head: 'Meeting Full',\n      detail: `This meeting has reached the full capacity of ${maxUsersPerRoom} participants. Try&nbsp;joining later.`,\n      button: 'OK'\n    }\n  };\n\n  const NOT_SHARING = {\n    detail: {\n      isSharing: false\n    }\n  };\n\n  function setUnreadMessages(count) {\n    if (!chatVisible) {\n      _unreadMsg = count;\n      unreadCountElem.textContent = (count === 0) ? '' : `(${count})`;\n    }\n  }\n\n  function setChatStatus(visible) {\n    chatVisible = visible;\n    if (visible) {\n      _chatHasBeenShown = true;\n      setUnreadMessages(0);\n      messageButtonElem.classList.add('activated');\n\n      // hide call controls on small screens\n      if (window.innerWidth <= 480) {\n        hideCallControls();\n      }\n    } else {\n      messageButtonElem.classList.remove('activated');\n    }\n    Utils.sendEvent('roomView:chatVisibility', visible);\n  }\n\n  const chatViews = {\n    unreadMessage() {\n      if (!_chatHasBeenShown) {\n        setChatStatus(true);\n      }\n      setUnreadMessages(_unreadMsg + 1);\n    },\n    hidden() {\n      Utils.sendEvent('roomView:screenChange');\n    },\n    shown() {\n      Utils.sendEvent('roomView:screenChange');\n    }\n  };\n\n  const chatEvents = {\n    hidden() {\n      document.body.data('chatStatus', 'hidden');\n      messageButtonElem.classList.remove('activated');\n      setUnreadMessages(0);\n    }\n  };\n\n  const hangoutEvents = {\n    screenOnStage(event) {\n      const status = event.detail.status;\n      if (status === 'on') {\n        dock.data('previouslyCollapsed', dock.classList.contains('collapsed'));\n        dock.classList.add('collapsed');\n      } else if (dock.data('previouslyCollapsed') !== null) {\n        dock.data('previouslyCollapsed') === 'true' ? dock.classList.add('collapsed') :\n          dock.classList.remove('collapsed');\n        dock.data('previouslyCollapsed', null);\n      }\n    },\n    rearranged() {\n      Utils.sendEvent('roomView:screenChange');\n    }\n  };\n\n  const screenShareCtrEvents = {\n    changeScreenShareStatus: toggleScreenSharing,\n    destroyed: toggleScreenSharing.bind(undefined, NOT_SHARING),\n    annotationStarted() {\n      Utils.setDisabled(annotateBtnElem, false);\n    },\n    annotationEnded() {\n      document.body.data('annotationVisible', 'false');\n      Utils.setDisabled(annotateBtnElem, true);\n    }\n  };\n\n  const roomControllerEvents = {\n    userChangeStatus(evt) {\n      // If user changed the status we need to reset the switch\n      if (evt.detail.name === 'video') {\n        setSwitchStatus(false, false, videoSwitch, 'roomView:videoSwitch');\n      } else if (evt.detail.name === 'audio') {\n        setSwitchStatus(false, false, audioSwitch, 'roomView:muteAllSwitch');\n      }\n    },\n    roomLocked(evt) {\n      const lockState = evt.detail;\n      RoomView.lockState = lockState;\n      const menuLockIcon = document.getElementById('lock-room-icon');\n      const menuLockText = document.getElementById('lock-msg');\n      const navBarStateIcon = document.getElementById('room-locked-state');\n\n      if (lockState === 'locked') {\n        menuLockText.innerHTML = 'Unlock Meeting';\n        menuLockIcon.setAttribute('data-icon', 'closedLock');\n        navBarStateIcon.style.display = 'block';\n      }\n      if (lockState === 'unlocked') {\n        menuLockText.innerHTML = 'Lock Meeting';\n        menuLockIcon.setAttribute('data-icon', 'openLock');\n        navBarStateIcon.style.display = 'none';\n\n        Modal.flashMessage('.room-unlocked-modal');\n      }\n    },\n    roomMuted(evt) {\n      const isJoining = evt.detail.isJoining;\n      setAudioSwitchRemotely(true);\n      Modal.showConfirm(isJoining ? MODAL_TXTS.join : MODAL_TXTS.muteRemotely);\n    },\n    sessionDisconnected() {\n      RoomView.participantsNumber = 0;\n      LayoutManager.removeAll();\n    },\n    controllersReady() {\n      const selectorStr = '#top-banner [disabled], .call-controls [disabled]'\n        + ':not(#toggle-publisher-video):not(#toggle-publisher-audio)'\n        + ':not(#annotate)';\n      const elements = document.querySelectorAll(selectorStr);\n      Array.prototype.forEach.call(elements, element => {\n        Utils.setDisabled(element, false);\n      });\n    },\n    annotationStarted() {\n      Utils.setDisabled(annotateBtnElem, false);\n    },\n    annotationEnded() {\n      document.body.data('annotationVisible', 'false');\n      Utils.setDisabled(annotateBtnElem, true);\n    },\n    chromePublisherError() {\n      Modal.showConfirm(MODAL_TXTS.chromePublisherError).then(() => {\n        document.location.reload();\n      });\n    },\n    meetingFullError() {\n      Modal.showConfirm(MODAL_TXTS.meetingFullError).then(() => {\n        document.location.reload();\n      });\n    }\n  };\n\n  function setAudioSwitchRemotely(isMuted) {\n    setSwitchStatus(isMuted, false, audioSwitch, 'roomView:muteAllSwitch');\n    isMuted ?\n      setPublisherAudioSwitchStatus('muted') :\n      setPublisherAudioSwitchStatus('activated');\n  }\n\n  function showConfirmChangeMicStatus(isMuted) {\n    return Modal.showConfirm(isMuted ? MODAL_TXTS.muteRemotely : MODAL_TXTS.unmutedRemotely);\n  }\n\n  function initHTMLElements() {\n    dock = document.getElementById('top-banner');\n    handler = dock;\n    callControlsElem = document.querySelector('.call-controls');\n    feedbackButton = document.querySelector('.feedbackButton');\n    participantsStrElem = document.getElementById('participantsStr');\n    recordingsNumberElem = dock.querySelector('#recordings');\n    videoSwitch = dock.querySelector('#videoSwitch');\n    audioSwitch = dock.querySelector('#audioSwitch');\n    unreadCountElem = document.getElementById('unreadCount');\n    togglePublisherAudioElem = document.getElementById('toggle-publisher-audio');\n    togglePublisherVideoElem = document.getElementById('toggle-publisher-video');\n    startArchivingElem = document.getElementById('startArchiving');\n    stopArchivingElem = document.getElementById('stopArchiving');\n    annotateBtnElem = document.getElementById('annotate');\n    manageRecordingsElem = document.getElementById('manageRecordings');\n    messageButtonElem = document.getElementById('message-btn');\n    topBannerElem = document.getElementById('top-banner');\n    screenElem = document.getElementById('screen');\n\n    // The title takes two lines maximum when the dock is expanded. When the title takes\n    // one line with expanded mode, it ends taking two lines while is collapsing because the witdh\n    // is reduced, so we have to fix the height to avoid this ugly effect during transition.\n    // var title = dock.querySelector('.info h1');\n    // title.style.height = title.clientHeight + 'px';\n  }\n\n  function createStreamView(streamId, type, controlBtns, name) {\n    return LayoutManager.append(streamId, type, controlBtns, name);\n  }\n\n  function deleteStreamView(id) {\n    LayoutManager.remove(id);\n  }\n\n  function showRoom() {\n    initHTMLElements();\n    topBannerElem.style.visibility = 'visible';\n    screenElem.style.visibility = 'visible';\n    screenElem.addEventListener('mousemove', showControls);\n    callControlsElem.addEventListener('mouseover', () => {\n      clearTimeout(hideCallControlsTimer);\n      overCallControls = true;\n    });\n    callControlsElem.addEventListener('mouseout', () => {\n      overCallControls = false;\n      hideCallControls();\n    });\n    feedbackButton && feedbackButton.addEventListener('mouseover', () => {\n      clearTimeout(hideFeedbackButtonTimer);\n      overFeedbackButton = true;\n    });\n    feedbackButton && feedbackButton.addEventListener('mouseout', () => {\n      overFeedbackButton = false;\n      hideFeedbackButton();\n    });\n  }\n\n  function showControls() {\n    showCallControls();\n    showFeedbackButton();\n  }\n\n  function showCallControls() {\n    callControlsElem.classList.add('visible');\n    if (!overCallControls && !hideCallControlsTimer) {\n      hideCallControlsTimer = setTimeout(hideCallControls, 3000);\n    }\n  }\n\n  function hideCallControls() {\n    hideCallControlsTimer = null;\n    callControlsElem.classList.remove('visible');\n  }\n\n  function showFeedbackButton() {\n    if (!feedbackButton) {\n      return;\n    }\n    feedbackButton.classList.add('visible');\n    if (!overFeedbackButton && !hideFeedbackButtonTimer) {\n      hideFeedbackButtonTimer = setTimeout(hideFeedbackButton, 3000);\n    }\n  }\n\n  function hideFeedbackButton() {\n    hideFeedbackButtonTimer = null;\n    feedbackButton.classList.remove('visible');\n  }\n\n\n  function showPublisherButtons(publisherOptions) {\n    Utils.setDisabled(togglePublisherVideoElem, false);\n    Utils.setDisabled(togglePublisherAudioElem, false);\n    if (publisherOptions.publishVideo) {\n      togglePublisherVideoElem.classList.add('activated');\n      togglePublisherVideoElem.querySelector('i').data('icon', 'video_icon');\n    }\n    if (publisherOptions.publishAudio) {\n      setPublisherAudioSwitchStatus('activated');\n    }\n  }\n\n  function setSwitchStatus(status, bubbleUp, domElem, evtName) {\n    const oldStatus = domElem.classList.contains('activated');\n    let newStatus;\n    if (status === undefined) {\n      newStatus = domElem.classList.toggle('activated');\n    } else {\n      newStatus = status;\n      if (status) {\n        domElem.classList.add('activated');\n      } else {\n        domElem.classList.remove('activated');\n      }\n    }\n    bubbleUp && newStatus !== oldStatus && Utils.sendEvent(evtName, { status: newStatus });\n  }\n\n  function setPublisherAudioSwitchStatus(status) {\n    if (status === 'activated') {\n      togglePublisherAudioElem.classList.add('activated');\n      togglePublisherAudioElem.querySelector('i').data('icon', 'mic');\n    } else {\n      togglePublisherAudioElem.classList.remove('activated');\n      togglePublisherAudioElem.querySelector('i').data('icon', 'mic-muted');\n    }\n  }\n\n  let cronograph = null;\n\n  function getCronograph() {\n    if (cronograph) {\n      return Promise.resolve(cronograph);\n    }\n    return LazyLoader.dependencyLoad([\n      '/js/components/cronograph.js'\n    ]).then(() => {\n      cronograph = Cronograph;\n      return cronograph;\n    });\n  }\n\n  function onStartArchiving(data) {\n    getCronograph().then(cronograph => { // eslint-disable-line consistent-return\n      const start = archive => {\n        let duration = 0;\n        archive && (duration = Math.round((Date.now() - archive.createdAt) / 1000));\n        cronograph.start(duration);\n        startArchivingElem.style.display = 'none';\n        stopArchivingElem.style.display = 'block';\n        stopArchivingElem.style.flex = 'auto';\n        stopArchivingElem.style.flexDirection = 'row';\n        manageRecordingsElem.classList.add('recording');\n      };\n\n      if (!enableArchiveManager) {\n        cronograph.init();\n        return start(null);\n      }\n\n      const onModel = () => { // eslint-disable-line consistent-return\n        var archives = ArchivesEventsListener.archives;\n        var archiveId = data.id;\n\n        if (archives) {\n          return start(archives[archiveId]);\n        }\n\n        ArchivesEventsListener.addEventListener('value', function onValue(archives) {\n          ArchivesEventsListener.removeEventListener('value', onValue);\n          start(archives[archiveId]);\n        });\n      };\n\n      const model = RecordingsController.model;\n\n      if (model) {\n        cronograph.init();\n        return onModel(model);\n      }\n\n      cronograph.init('Recording');\n      exports.addEventListener('recordings-model-ready', function gotModel() {\n        exports.removeEventListener('recordings-model-ready', gotModel);\n        onModel(RecordingsController.model);\n      });\n    });\n  }\n\n  function onStopArchiving() {\n    getCronograph().then(cronograph => {\n      stopArchivingElem.style.display = 'none';\n      startArchivingElem.style.display = 'inline-flex';\n      manageRecordingsElem.classList.remove('recording');\n      cronograph.stop();\n    });\n  }\n\n  const addHandlers = () => {\n    handler.addEventListener('click', () => {\n      dock.classList.toggle('collapsed');\n      dock.data('previouslyCollapsed', null);\n    });\n\n    callControlsElem.addEventListener('click', e => {\n      let elem = e.target;\n      elem = HTMLElems.getAncestorByTagName(elem, 'button');\n      if (elem === null) {\n        return;\n      }\n      switch (elem.id) {\n        case 'addToCall': {\n          Utils.sendEvent('roomView:addToCall');\n          break;\n        }\n        case 'toggle-publisher-video': {\n          let hasVideo;\n          if (elem.classList.contains('activated')) {\n            elem.classList.remove('activated');\n            elem.querySelector('i').data('icon', 'no_video');\n            hasVideo = false;\n          } else {\n            elem.classList.add('activated');\n            elem.querySelector('i').data('icon', 'video_icon');\n            hasVideo = true;\n          }\n          Utils.sendEvent('roomView:togglePublisherVideo', { hasVideo });\n          break;\n        }\n        case 'toggle-publisher-audio': {\n          let hasAudio;\n          if (elem.classList.contains('activated')) {\n            elem.classList.remove('activated');\n            elem.querySelector('i').data('icon', 'mic-muted');\n            hasAudio = false;\n          } else {\n            elem.classList.add('activated');\n            elem.querySelector('i').data('icon', 'mic');\n            hasAudio = true;\n          }\n          Utils.sendEvent('roomView:togglePublisherAudio', { hasAudio });\n          break;\n        }\n        case 'screen-share': {\n          Utils.sendEvent('roomView:shareScreen');\n          break;\n        }\n        case 'annotate': {\n          document.body.data('annotationVisible') === 'true' ?\n            document.body.data('annotationVisible', 'false') : document.body.data('annotationVisible', 'true');\n          Utils.sendEvent('roomView:screenChange');\n          break;\n        }\n        case 'message-btn': {\n          setChatStatus(!messageButtonElem.classList.contains('activated'));\n          break;\n        }\n        case 'endCall': {\n          if (RoomView.lockState === 'locked') {\n            Modal.showConfirm(MODAL_TXTS.endLockedCall).then(accept => {\n              if (accept.altHasAccepted) {\n                RoomView.participantsNumber = 0;\n                Utils.sendEvent('roomView:endCall');\n              } else if (accept) {\n                Utils.sendEvent('roomView:setRoomLockState', 'unlocked');\n                setTimeout(() => {\n                  RoomView.participantsNumber = 0;\n                  Utils.sendEvent('roomView:endCall');\n                }, 3000);\n              }\n            });\n          } else {\n            Modal.showConfirm(MODAL_TXTS.endCall).then(accept => {\n              if (accept) {\n                RoomView.participantsNumber = 0;\n                Utils.sendEvent('roomView:endCall');\n              }\n            });\n          }\n          break;\n        }\n      }\n    });\n\n    const optionIcons = document.getElementById('top-icons-container');\n\n    optionIcons.addEventListener('click', () => {\n      BubbleFactory.get('chooseLayout').hide();\n    });\n\n    if (window.enableRoomLocking) {\n      const lockRoom = document.getElementById('lockRoomContainer');\n\n      lockRoom.addEventListener('click', () => {\n        const lockIcon = document.getElementById('lock-room-icon');\n        const lockState = lockIcon.getAttribute('data-icon');\n        if (lockState === 'openLock') {\n          Modal.showConfirm(MODAL_TXTS.lock).then(lock => {\n            if (lock) {\n              Utils.sendEvent('roomView:setRoomLockState', 'locked');\n            }\n          });\n        }\n        if (lockState === 'closedLock') {\n          Utils.sendEvent('roomView:setRoomLockState', 'unlocked');\n        }\n      });\n    }\n\n    const switchMic = document.getElementById('pickMicContainer');\n\n    switchMic.addEventListener('click', () => {\n      const select = document.getElementById('select-devices');\n      select.style.display = 'inline-block';\n      Modal.showConfirm({\n        head: 'Set mic input',\n        detail: 'Please identify the audio source in the following list:',\n        button: 'Change'\n      }).then(start => {\n        if (start) {\n          Utils.sendEvent('roomView:setAudioSource', select.value);\n        }\n        select.style.display = 'none';\n      });\n    });\n\n    const switchCam = document.getElementById('pickCamContainer');\n\n    switchCam.addEventListener('click', () => {\n      Utils.sendEvent('roomView:toggleFacingMode');\n    });\n\n    const menu = document.getElementById('top-banner');\n\n    menu.addEventListener('click', e => {\n      const elem = HTMLElems.getAncestorByTagName(e.target, 'a') || e.target;\n      // pointer-events is not working on IE so we can receive as target a child\n      elem.blur();\n\n      if (!elem) {\n        return;\n      }\n\n      switch (elem.id) {\n        case 'viewRecordings':\n          BubbleFactory.get('viewRecordings').toggle();\n          break;\n        case 'options-container':\n        case 'chooseLayout':\n          BubbleFactory.get('chooseLayout').toggle();\n          break;\n        case 'startArchiving':\n        case 'stopArchiving':\n          Utils.sendEvent(`roomView:${elem.id}`);\n          break;\n        case 'startChat':\n        case 'stopChat':\n          setChatStatus(elem.id === 'startChat');\n          break;\n        case 'addToCall':\n          Utils.sendEvent('roomView:addToCall');\n          break;\n        case 'startSharingDesktop':\n        case 'stopSharingDesktop':\n          Utils.sendEvent('roomView:shareScreen');\n          break;\n        case 'videoSwitch':\n          if (!videoSwitch.classList.contains('activated')) {\n            setSwitchStatus(true, true, videoSwitch, 'roomView:videoSwitch');\n          } else {\n            setSwitchStatus(false, true, videoSwitch, 'roomView:videoSwitch');\n          }\n          break;\n        case 'audioSwitch':\n          if (!audioSwitch.classList.contains('activated')) {\n            Modal.showConfirm(MODAL_TXTS.mute).then(shouldDisable => {\n              if (shouldDisable) {\n                setSwitchStatus(true, true, audioSwitch, 'roomView:muteAllSwitch');\n                togglePublisherAudioElem.classList.remove('activated');\n              }\n            });\n          } else {\n            setSwitchStatus(false, true, audioSwitch, 'roomView:muteAllSwitch');\n            togglePublisherAudioElem.classList.add('activated');\n          }\n      }\n    });\n\n    if (enableSip) {\n      const dialOutBtn = document.getElementById('dialOutBtn');\n      // Send event to get phonenumber from phoneNumberView\n      dialOutBtn.addEventListener('click', event => {\n        event.preventDefault();\n        Utils.sendEvent('roomView:verifyDialOut');\n      });\n\n      // Listen for PhoneNumberView event\n      Utils.addEventsHandlers('phoneNumberView:', {\n        dialOut(evt) {\n          const phonenumber = evt.detail;\n          Utils.sendEvent('roomView:dialOut', phonenumber);\n        }\n      });\n    }\n\n    exports.addEventListener('archiving', e => {\n      const detail = e.detail;\n\n      switch (detail.status) {\n        case 'started':\n          onStartArchiving(detail);\n\n          break;\n        case 'stopped':\n          onStopArchiving();\n          break;\n      }\n\n      document.body.data('archiveStatus', e.detail.status);\n    });\n\n    Utils.addEventsHandlers('screenShareController:', screenShareCtrEvents, exports);\n    Utils.addEventsHandlers('roomController:', roomControllerEvents, exports);\n    Utils.addEventsHandlers('chat:', chatEvents);\n    Utils.addEventsHandlers('chatView:', chatViews);\n    Utils.addEventsHandlers('hangout:', hangoutEvents);\n  };\n\n  function toggleScreenSharing(evt) {\n    const isSharing = evt.detail.isSharing;\n    document.body.data('desktopStatus', isSharing ? 'sharing' : 'notSharing');\n  }\n\n  const getURLtoShare = () => {\n    const textArea = document.getElementById('current-url');\n    const urlToShare = window.location.origin + window.location.pathname;\n    textArea.innerHTML = urlToShare;\n  };\n\n  const init = (enableHangoutScroll, aEnableArchiveManager, aEnableSip) => {\n    enableArchiveManager = aEnableArchiveManager;\n    initHTMLElements();\n    dock.style.visibility = 'visible';\n    enableSip = aEnableSip;\n    addHandlers();\n    getURLtoShare();\n    LayoutManager.init('.streams', enableHangoutScroll);\n  };\n\n  exports.RoomView = {\n    init,\n\n    set participantsNumber(value) {\n      HTMLElems.replaceText(participantsStrElem, value);\n      if (!window.enableRoomLocking) {\n        return;\n      }\n      if (value === 1 && RoomView.lockState !== 'locked') {\n        document.getElementById('lockRoomContainer').style.display = 'none';\n      } else {\n        document.getElementById('lockRoomContainer').style.removeProperty('display');\n      }\n      if (value === 1 && RoomView.lockState === 'locked') {\n        Utils.sendEvent('roomView:setRoomLockState', 'unlocked');\n        document.getElementById('lockRoomContainer').style.display = 'none';\n      }\n    },\n\n    set recordingsNumber(value) {\n      if (!manageRecordingsElem) {\n        return;\n      }\n      if (value === 0) {\n        manageRecordingsElem.style.display = 'none';\n        document.getElementById('toggleArchiving').classList.remove('manage-recordings');\n      } else {\n        manageRecordingsElem.style.display = 'block';\n        recordingsNumberElem && (recordingsNumberElem.textContent = value);\n        document.getElementById('toggleArchiving').classList.add('manage-recordings');\n      }\n    },\n\n    showRoom,\n    showPublisherButtons,\n    createStreamView,\n    deleteStreamView,\n    setAudioSwitchRemotely,\n    showConfirmChangeMicStatus\n  };\n})(this);\n"]}