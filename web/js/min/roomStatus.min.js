(n=>{let t,e={};const o={};let i,s=0;function c(n){const t=o[n];void 0!==t&&(delete o[n],window.clearInterval(t))}function a(n){const c=n.connection,a=c.creationTime,r=c.connectionId;if(a<t)s++;else if(!i.isMyself(c)){const n=n=>{var t;s<=0&&(t=n,i.sendSignal("status",e,t))};n(c);const t=window.setInterval(n.bind(void 0,c),6e4);o[r]=t}}const r={"signal:status":function(n){e=JSON.parse(n.data),(this||i).sendSignal("statusACK"),this.removeListener("signal:status"),Utils.sendEvent("roomStatus:updatedRemotely")},"signal:statusACK":function(n){c(n.from.connectionId)},connectionCreated(n){n.connection.data&&a(n)},sessionConnected(n){t=n.target.connection.creationTime,i=this},connectionDestroyed(n){n.connection.creationTime<t&&s--,c(n.connection.connectionId)},sessionDisconnected(){window.location="/"}};this.RoomStatus={set:function(n,t){"object"==typeof t&&(e[n]=t)},get:n=>e[n],init:function(n,t){return e=t||{},function(n){return Array.isArray(n)||(n=[n]),n.push(r),n}(n)}}})();