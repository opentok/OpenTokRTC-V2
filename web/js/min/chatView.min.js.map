{"version":3,"sources":["web/js/chatView.js"],"names":["exports","usrId","closeChatBtn","headerChat","sendMsgBtn","chatMsgInput","chatContainer","chatContent","chatForm","emojiPicker","toggleEmojiBtn","chatParticipants","eventHandlers","_visibilityChanging","Promise","resolve","setVisibility","isVisible","addEventListener","onKeyPress","onSubmit","onDrop","onClose","onToggle","onSendClicked","onEmojiClicked","toggleEmojiView","Chat","show","then","Utils","sendEvent","scrollTo","focus","removeEventListener","hide","addEventsHandlers","configuredEvts","incomingMessage","name","[object Object]","evt","data","detail","item","HTMLElems","createElementAt","info","otHelper","isMyself","connectionId","senderId","classList","add","chatIndex","indexOf","push","participantNumber","toString","slice","time","toLowerCase","sender","userName","insertText","text","insertChatLine","visible","presenceEvent","getCurrentTime","insertChatEvent","messageDelivered","value","chatVisibility","couldBeChanged","Array","isArray","forEach","aEvt","event","type","addHandlers","preventDefault","style","display","trim","length","window","orientation","document","activeElement","blur","myfield","keycode","vent","keyCode","which","shiftKey","bind","undefined","stopImmediatePropagation","isCollapsed","expand","collapse","stopPropagation","elemRoot","txtElems","TextProcessor","parse","targetElem","node","TYPE","URL","href","target","addText","scrollTop","scrollHeight","ChatView","init","aUsrId","LazyLoader","dependencyLoad","chatWndElem","getElementById","querySelector","initHTMLElements","this"],"mappings":"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","sourcesContent":["/* global Chat, TextProcessor, otHelper */\n\n!(exports => {\n  let usrId;\n\n  let closeChatBtn;\n  let headerChat;\n  let sendMsgBtn;\n  let chatMsgInput;\n  let chatContainer;\n  let chatContent;\n  let chatForm;\n  let emojiPicker;\n  let toggleEmojiBtn;\n  const chatParticipants = [];\n\n  let _visibilityChanging = Promise.resolve();\n\n  function isMobile() { return typeof window.orientation !== 'undefined'; }\n\n  function isVisible() {\n    return _visibilityChanging.then(() => {\n      return Chat.visible;\n    });\n  }\n\n  function setVisibility(isVisible) {\n    if (isVisible) {\n      addHandlers();\n      return Chat.show().then(() => {\n        Utils.sendEvent('chatView:shown');\n        scrollTo();\n        chatMsgInput.focus();\n      });\n    }\n    removeHandlers();\n    return Chat.hide().then(() => {\n      Utils.sendEvent('chatView:hidden');\n    });\n  }\n\n  let eventHandlers;\n\n  function addEventsHandlers(configuredEvts) {\n    eventHandlers = {\n      incomingMessage: {\n        name: 'chatController:incomingMessage',\n        handler(evt) {\n          const data = evt.detail.data;\n          insertChatLine(data);\n          isVisible().then(visible => {\n            if (!visible) {\n              Utils.sendEvent('chatView:unreadMessage', { data });\n            }\n          });\n        }\n      },\n      presenceEvent: {\n        name: 'chatController:presenceEvent',\n        handler(evt) {\n          insertChatEvent(evt.detail);\n        }\n      },\n      messageDelivered: {\n        name: 'chatController:messageDelivered',\n        handler() {\n          chatMsgInput.value = '';\n        }\n      },\n      chatVisibility: {\n        name: 'roomView:chatVisibility',\n        handler(evt) {\n          _visibilityChanging = setVisibility(evt.detail);\n        },\n        couldBeChanged: true\n      }\n    };\n    Array.isArray(configuredEvts) && configuredEvts.forEach(aEvt => {\n      const event = eventHandlers[aEvt.type];\n      event && event.couldBeChanged && (event.name = aEvt.name);\n    });\n    Utils.addHandlers(eventHandlers);\n  }\n\n  function initHTMLElements() {\n    const chatWndElem = document.getElementById('chat');\n    headerChat = chatWndElem.querySelector('header');\n    closeChatBtn = chatWndElem.querySelector('#closeChat');\n    sendMsgBtn = chatWndElem.querySelector('#sendTxt');\n    chatMsgInput = chatWndElem.querySelector('#msgText');\n    chatContainer = chatWndElem.querySelector('#chatMsgs');\n    chatContent = chatContainer.querySelector('ul');\n    chatForm = chatWndElem.querySelector('#chatForm');\n    emojiPicker = document.querySelector('emoji-picker');\n    toggleEmojiBtn = chatWndElem.querySelector('#addEmoji');\n  }\n\n  const onEmojiClicked = event => chatMsgInput.value += (' ' + (event.detail.unicode) + ' ');\n  const toggleEmojiView = evt => {\n    evt.preventDefault();\n    if (emojiPicker.style.display === 'none') {\n      emojiPicker.style.display = 'block';\n\n    } else {\n      emojiPicker.style.display = 'none';\n    }\n  };\n  const onSendClicked = evt => {\n    evt.preventDefault();\n    if (!chatMsgInput.value.trim().length) {\n      return;\n    }\n    if (isMobile()) {\n      document.activeElement.blur(); // Hide the virtual keyboard.\n    } else {\n      chatMsgInput.focus();\n    }\n    Utils.sendEvent('chatView:outgoingMessage', {\n      sender: usrId,\n      time: Utils.getCurrentTime(),\n      text: chatMsgInput.value.trim()\n    });\n    if (emojiPicker) {\n      emojiPicker.style.display = 'none';\n    }\n\n  };\n\n  const onKeyPress = ((myfield, evt) => {\n    let keycode;\n    if (window.vent) {\n      keycode = window.event.keyCode;\n    } else if (evt) {\n      keycode = evt.which;\n    } else {\n      return true;\n    }\n    if (keycode === 13) {\n      if (evt.shiftKey === true) {\n        return true;\n      }\n      onSendClicked(evt);\n      return false;\n    }\n    return true;\n  }).bind(undefined, chatMsgInput);\n\n  const onSubmit = evt => {\n    evt.preventDefault();\n    return false;\n  };\n\n  const onClose = evt => {\n    evt.preventDefault();\n    evt.stopImmediatePropagation();\n    _visibilityChanging = setVisibility(false);\n  };\n\n  const onToggle = () => {\n    Chat.isCollapsed() ? Chat.expand() : Chat.collapse();\n  };\n\n  const onDrop = evt => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    return false;\n  };\n\n  // The ChatController should have the handlers and call the view for\n  // doing visual work\n  function addHandlers() {\n    chatForm.addEventListener('keypress', onKeyPress);\n    chatForm.addEventListener('submit', onSubmit);\n    chatForm.addEventListener('drop', onDrop);\n    closeChatBtn.addEventListener('click', onClose);\n    headerChat.addEventListener('click', onToggle);\n    sendMsgBtn.addEventListener('click', onSendClicked);\n    if (emojiPicker) {\n      emojiPicker.addEventListener('emoji-click', onEmojiClicked);\n      toggleEmojiBtn.addEventListener('click', toggleEmojiView);\n    }\n\n\n  }\n\n  function removeHandlers() {\n    chatForm.removeEventListener('keypress', onKeyPress);\n    closeChatBtn.removeEventListener('click', onClose);\n    headerChat.removeEventListener('click', onToggle);\n    sendMsgBtn.removeEventListener('click', onSendClicked);\n    chatForm.removeEventListener('drop', onDrop);\n    if (emojiPicker) {\n      emojiPicker.removeEventListener('emoji-click', onEmojiClicked);\n      toggleEmojiBtn.removeEventListener('click', toggleEmojiView);\n    }\n\n  }\n\n  function insertChatEvent(data) {\n    const time = (data.time || Utils.getCurrentTime()).toLowerCase();\n    const item = HTMLElems.createElementAt(chatContent, 'li');\n    item.classList.add('event');\n    const name = data.sender || data.userName;\n    const text = `${time} - ${name} ${data.text}`;\n    insertText(item, text);\n    scrollTo();\n  }\n\n  function insertText(elemRoot, text) {\n    const txtElems = TextProcessor.parse(text);\n    const targetElem = HTMLElems.createElementAt(elemRoot, 'p');\n    txtElems.forEach(node => {\n      switch (node.type) {\n        case TextProcessor.TYPE.URL:\n          HTMLElems.createElementAt(targetElem, 'a',\n            { href: node.value, target: '_blank' }, node.value);\n          break;\n        default:\n          HTMLElems.addText(targetElem, node.value);\n      }\n    });\n  }\n\n  function insertChatLine(data) {\n    const item = HTMLElems.createElementAt(chatContent, 'li');\n    const info = HTMLElems.createElementAt(item, 'p');\n    if (otHelper.isMyself({ connectionId: data.senderId })) {\n      item.classList.add('yourself');\n    } else {\n      let chatIndex = chatParticipants.indexOf(data.senderId);\n      if (chatIndex === -1) {\n        chatIndex = chatParticipants.push(data.senderId) - 1;\n      }\n      // We only have 10 colors so just get last digit.\n      const participantNumber = chatIndex.toString().slice(-1);\n      info.data('participant-number', participantNumber);\n    }\n\n    const time = data.time.toLowerCase();\n    HTMLElems.createElementAt(info, 'span', null, time).classList.add('time');\n    HTMLElems.createElementAt(info, 'span', null, data.sender || data.userName)\n      .classList.add('sender');\n\n    insertText(info, data.text);\n\n    scrollTo();\n  }\n\n  function scrollTo() {\n    chatContainer.scrollTop = chatContainer.scrollHeight;\n  }\n\n  function init(aUsrId, configuredEvts) {\n    return LazyLoader.dependencyLoad([\n      '/js/helpers/textProcessor.js',\n      '/js/components/chat.js'\n    ]).then(() => {\n      initHTMLElements();\n      usrId = aUsrId;\n      Chat.init();\n      addEventsHandlers(configuredEvts);\n    });\n  }\n\n  const ChatView = {\n    init\n  };\n\n  exports.ChatView = ChatView;\n})(this);\n"]}